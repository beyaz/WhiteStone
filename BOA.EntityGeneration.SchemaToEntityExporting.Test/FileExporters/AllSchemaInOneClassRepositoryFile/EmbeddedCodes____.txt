/// <summary>
///     The unit of work SQL utility
/// </summary>
static class UnitOfWorkSqlUtil
{
    #region Public Methods
    /// <summary>
    ///     Executes the non query.
    /// </summary>
    public static int ExecuteNonQuery(this IUnitOfWork database, string methodFullPath, SqlInfo sqlInfo)
    {
        database.CommandText = sqlInfo.CommandText;

        AddParameters(database, sqlInfo);

        return database.ExecuteNonQuery();
    }

    /// <summary>
    ///     Executes the reader to contract.
    /// </summary>
    public static TResultContractType ExecuteReaderToContract<TResultContractType>(this IUnitOfWork database, string methodFullPath, SqlInfo sqlInfo, Action<IDataReader, TResultContractType> readContract) where TResultContractType : new()
    {
        database.CommandText = sqlInfo.CommandText;

        AddParameters(database, sqlInfo);

        var reader = database.ExecuteReader();

        var dataContract = default(TResultContractType);

        while (reader.Read())
        {
            dataContract = new TResultContractType();

            readContract(reader, dataContract);

            break;
        }

        reader.Close();

        return dataContract;
    }

    /// <summary>
    ///     Executes the reader to list.
    /// </summary>
    public static List<TResultContractType> ExecuteReaderToList<TResultContractType>(this IUnitOfWork database, string methodFullPath, SqlInfo sqlInfo, Action<IDataReader, TResultContractType> readContract) where TResultContractType : new()
    {
        database.CommandText = sqlInfo.CommandText;

        AddParameters(database, sqlInfo);

        var reader = database.ExecuteReader();

        return reader.ReadToList(readContract);
    }

    /// <summary>
    ///     Executes the scalar.
    /// </summary>
    public static TReturnValueType ExecuteScalar<TReturnValueType>(this IUnitOfWork database, string methodFullPath, SqlInfo sqlInfo)
    {
        database.CommandText = sqlInfo.CommandText;

        AddParameters(database, sqlInfo);

        return (TReturnValueType) database.ExecuteScalar();
    }
    #endregion

    #region Methods
    /// <summary>
    ///     Adds the parameters.
    /// </summary>
    static void AddParameters( IUnitOfWork unitOfWork, SqlInfo sqlInfo)
    {
        if (sqlInfo.Parameters == null)
        {
            return;
        }

        unitOfWork.AddParameters(sqlInfo.Parameters);
    }

       

    /// <summary>
    ///     Readers to list.
    /// </summary>
    static List<TContractType> ReadToList<TContractType>(this IDataReader reader, Action<IDataReader, TContractType> ReadContract) where TContractType : new()
    {
        var listOfDataContract = new List<TContractType>();

        while (reader.Read())
        {
            var dataContract = new TContractType();

            ReadContract(reader, dataContract);

            listOfDataContract.Add(dataContract);
        }

        reader.Close();

        return listOfDataContract;
    }
    #endregion
}