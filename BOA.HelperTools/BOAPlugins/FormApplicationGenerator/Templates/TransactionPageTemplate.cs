// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace BOAPlugins.FormApplicationGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class TransactionPageTemplate : TransactionPageTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"import * as React from ""react""
import { TransactionPage, TransactionPageComposer } from ""b-framework""
import { BAccountComponent } from ""b-account-component""
import { BInput } from ""b-input""
import { BComboBox } from ""b-combo-box""
import { BCheckBox } from ""b-check-box""
import { BGridSection } from ""b-grid-section""
import { BGridRow } from ""b-grid-row""
import { BInputMask } from ""b-input-mask""
import { BDateTimePicker } from ""b-datetime-picker""
import { BBranchComponent } from ""b-branch-component""
import { BParameterComponent } from ""b-parameter-component""
import { BInputNumeric } from ""b-input-numeric"";
import { Helper } from ""../utils/Helper"";
import { ResourceCode } from ""../utils/ResourceCode"";
import { FormAssistant } from ""../utils/FormAssistant"";
import { Message } from ""../utils/Message"";
import { BFormManager } from ""b-form-manager""
import { RequestName} from ""../utils/AutoGenerated"";
import { ");
            
            #line 25 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Command as CommandName} from \"../utils/AutoGenerated\";\r\n\r\nimport Common = BOA.Com" +
                    "mon.Types;\r\nimport BasePageProps = BFramework.BasePageProps;\r\nimport ");
            
            #line 29 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RequestName));
            
            #line default
            #line hidden
            this.Write(" =");
            
            #line 29 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NamespaceNameForType));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 29 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RequestName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 31 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
if(Snaps.Count > 0)
            
            #line default
            #line hidden
            
            #line 32 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
{
            
            #line default
            #line hidden
            this.Write("    interface ISnaps\r\n    {\r\n");
            
            #line 35 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"

int i=0,end = Snaps.Count-1;
for(i=0; i < end;i++)
            
            #line default
            #line hidden
            
            #line 38 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
{
            
            #line default
            #line hidden
            
            #line 39 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
var snap= Snaps[i];
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 40 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(snap.Name));
            
            #line default
            #line hidden
            this.Write(":");
            
            #line 40 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(snap.ComponentTypeName));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 41 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 42 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Snaps[end].Name));
            
            #line default
            #line hidden
            this.Write(":");
            
            #line 42 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Snaps[end].ComponentTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n");
            
            #line 44 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\nclass ");
            
            #line 47 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" extends BrowsePage\r\n{\r\n");
            
            #line 49 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
if(Snaps.Count > 0)
            
            #line default
            #line hidden
            
            #line 50 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
{
            
            #line default
            #line hidden
            this.Write("    snaps: ISnaps;\r\n");
            
            #line 52 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    constructor(props: BasePageProps)\r\n    {\r\n        super(props);\r\n\r\n        th" +
                    "is.connect(this);\r\n\r\n        FormAssistant.initialize(this,RequestName.");
            
            #line 59 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RequestName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 60 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
if(IsTabForm)
            
            #line default
            #line hidden
            
            #line 61 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
{
            
            #line default
            #line hidden
            this.Write("        this.tabEnabled = true;\r\n");
            
            #line 63 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    evaluateActionStates()\r\n    {\r\n        if (this.state.pageParams.dat" +
                    "a)\r\n        {\r\n            this.disableAction(CommandName.New);\r\n        }\r\n    " +
                    "}\r\n");
            
            #line 73 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
if(HasWorkFlow)
            
            #line default
            #line hidden
            
            #line 74 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
{
            
            #line default
            #line hidden
            this.Write(@"    onActionClick(command: Common.ResourceActionContract, executeWorkFlow: () => void)
    {
        this.executeWorkFlow = executeWorkFlow;

        FormAssistant.executeWindowRequest(this,command.commandName);

        return /*isCompleted*/false;
    }
");
            
            #line 83 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
}else {
            
            #line default
            #line hidden
            this.Write("    onActionClick(command: Common.ResourceActionContract)\r\n    {\r\n        FormAss" +
                    "istant.executeWindowRequest(this,command.commandName);\r\n\r\n        return /*isCom" +
                    "pleted*/true;\r\n    }\r\n");
            
            #line 90 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(@"    componentDidMount()
    {
        super.componentDidMount();

        FormAssistant.componentDidMount(this);
    }

    proxyDidRespond(proxyResponse: ProxyResponse)
    {
        return FormAssistant.receiveResponse(this,proxyResponse);
    }
");
            
            #line 102 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
if(IsTabForm)
            
            #line default
            #line hidden
            
            #line 103 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
{
            
            #line default
            #line hidden
            this.Write(@"    renderTab()
    {
        if (!FormAssistant.isReadyToRender(this))
        {
            return [];
        }
        
        const context    = this.state.context;

        const windowRequest = this.assistant.getWindowRequest();
        
        const windowRequest: ");
            
            #line 115 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RequestName));
            
            #line default
            #line hidden
            this.Write(" = FormAssistant.getWindowRequest(this);\r\n\r\n        const data       = windowRequ" +
                    "est.data;\r\n        const dataSource = windowRequest.dataSource;\r\n\r\n        retur" +
                    "n [\r\n");
            
            #line 121 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
ContentAsTabControl.PushIndent("            ");
            
            #line default
            #line hidden
            
            #line 122 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ContentAsTabControl.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n        ];\r\n    }\r\n");
            
            #line 125 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
} else
            
            #line default
            #line hidden
            
            #line 126 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
    {
            
            #line default
            #line hidden
            this.Write(@"    render()
    {
        if (!FormAssistant.isReadyToRender(this))
        {
            return <div/>;
        }

        const context    = this.state.context;

        const windowRequest = this.assistant.getWindowRequest();
        
        const windowRequest: ");
            
            #line 138 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RequestName));
            
            #line default
            #line hidden
            this.Write(" = FormAssistant.getWindowRequest(this);\r\n\r\n        const data       = windowRequ" +
                    "est.data;\r\n        const dataSource = windowRequest.dataSource;\r\n\r\n        retur" +
                    "n (\r\n");
            
            #line 144 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
ContentAsBCardSection.PushIndent("            ");
            
            #line default
            #line hidden
            
            #line 145 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ContentAsBCardSection.TransformText()));
            
            #line default
            #line hidden
            this.Write("            \r\n        );\r\n    }\r\n");
            
            #line 148 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
    }
            
            #line default
            #line hidden
            this.Write("    \r\n    \r\n\r\n       \r\n}\r\n\r\nexport default TransactionPageComposer(");
            
            #line 155 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\Templates\TransactionPageTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(");");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class TransactionPageTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
