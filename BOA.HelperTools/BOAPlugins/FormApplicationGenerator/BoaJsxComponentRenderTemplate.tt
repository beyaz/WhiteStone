<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#if(IsBDateTimePicker)#>
<#{#>
<BDateTimePicker format = "DDMMYYYY")
                 value  = {data.<#=ValueAccessPath#>}
                 dateOnChange = {(e: any, value: Date) => data.<#=ValueAccessPath#> = value}
                 floatingLabelTextDate = {<#=Label#>}
                 context = {context}/>
<#}
else if(IsBDateTimePicker)
{#>
<BInput value    = {data.<#=ValueAccessPath#>}
        onChange = {(e: any, value: string) => data.<#=ValueAccessPath#> = value}
        floatingLabelTextDate = {<#=Label#>}
        context = {context}/>
<#}
else if(IsBInputNumericDecimal)
{#>
<BInputNumeric value = {data.<#=ValueAccessPath#>}
               onChange = {(e: any, value: any) => data.<#=ValueAccessPath#> = value}
               floatingLabelTextDate = {<#=Label#>}
               format = {"D"}
               maxLength = {22}
               context = {context}/>
<#}
else if(IsBInputNumeric)
{#>
<BInputNumeric value = {data.<#=ValueAccessPath#>}
               onChange = {(e: any, value: any) => data.<#=ValueAccessPath#> = value}
               floatingLabelTextDate = {<#=Label#>}
               maxLength = {10}
               context = {context}/>
<#}
else if(IsBAccountComponent)
{#>
<BAccountComponent accountNumber = {data.<#=ValueAccessPath#>}
                   onAccountSelect = {(selectedAccount: any) => data.<#=ValueAccessPath#> = selectedAccount ? selectedAccount.accountNumber : null}
                   isVisibleBalance={false}
                   isVisibleAccountSuffix={false}
                   enableShowDialogMessagesInCallback={false}
                   isVisibleIBAN={false}
                   ref={(r: any) => this.snaps.SnapName = r}
                   context = {context}/>
<#}
else if(IsBCheckBox)
{#>
<BCheckBox checked = {data.<#=ValueAccessPath#>}
           onCheck = {(e: Object, isChecked: boolean) => data.<#=ValueAccessPath#> = isChecked}
           label = {<#=Label#>}
           context = {context}/>
<#}
else if(IsBParameterComponent && ValueTypeIsInt32)
{#>
 <BParameterComponent selectedParamCode = {Helper.numberToString(data.<#=ValueAccessPath#>)}
                      onParameterSelect = {(selectedParameter: BOA.Types.Kernel.General.ParameterContract) => data.<#=ValueAccessPath#> = selectedParameter ? Helper.stringToNumber(selectedParameter.paramCode) : null}
                      paramType ="<#=ParamType#>"
                      hintText  = {<#=Label#>}
                      labelText = {<#=Label#>}
                      isAllOptionIncluded={true}
                      paramColumns={[
                            { name: "paramCode",        header: Message.Code,        visible: false },
                            { name: "paramDescription", header: Message.Description, width:   200 }
                      ]}
                      ref = {(r: any) => this.snaps.<#=SnapName#> = r}
                      context = {context}/>

<#}
else if(IsBParameterComponent)
{#>
 <BParameterComponent selectedParamCode = {data.<#=ValueAccessPath#>}
                      onParameterSelect = {(selectedParameter: BOA.Types.Kernel.General.ParameterContract) => data.<#=ValueAccessPath#> = selectedParameter ? selectedParameter.paramCode : null}
                      paramType ="<#=ParamType#>"
                      hintText  = {<#=Label#>}
                      labelText = {<#=Label#>}
                      isAllOptionIncluded={true}
                      paramColumns={[
                            { name: "paramCode",        header: Message.Code,        visible: false },
                            { name: "paramDescription", header: Message.Description, width:   200 }
                      ]}
                      ref = {(r: any) => this.snaps.<#=SnapName#> = r}
                      context = {context}/>

<#}
else if(IsBBranchComponent)
{#>
<BBranchComponent selectedBranchId = {data.<#=ValueAccessPath#>}
                  onBranchSelect   = {(selectedBranch: BOA.Common.Types.BranchContract) => data.<#=ValueAccessPath#> = selectedBranch ? selectedBranch.branchId : null}
                  mode       = {"horizontal"}
                  labelText  = {<#=Label#>}
                  sortOption = {BBranchComponent.name}                      
                  context    = {context}/>

<#}#>


