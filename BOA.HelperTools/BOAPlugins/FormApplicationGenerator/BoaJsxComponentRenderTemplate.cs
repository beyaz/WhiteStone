// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace BOAPlugins.FormApplicationGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class BoaJsxComponentRenderTemplate : BoaJsxComponentRenderTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
if(IsBDateTimePicker)
            
            #line default
            #line hidden
            
            #line 7 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
{
            
            #line default
            #line hidden
            this.Write("<BDateTimePicker format = \"DDMMYYYY\")\r\n                 value  = {data.");
            
            #line 9 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n                 dateOnChange = {(e: any, value: Date) => data.");
            
            #line 10 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = value}\r\n                 floatingLabelTextDate = {");
            
            #line 11 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n                 context = {context}/>\r\n");
            
            #line 13 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBDateTimePicker)
{
            
            #line default
            #line hidden
            this.Write("<BInput value    = {data.");
            
            #line 16 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n        onChange = {(e: any, value: string) => data.");
            
            #line 17 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = value}\r\n        floatingLabelTextDate = {");
            
            #line 18 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n        context = {context}/>\r\n");
            
            #line 20 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBInputNumericDecimal)
{
            
            #line default
            #line hidden
            this.Write("<BInputNumeric value = {data.");
            
            #line 23 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n               onChange = {(e: any, value: any) => data.");
            
            #line 24 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = value}\r\n               floatingLabelTextDate = {");
            
            #line 25 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n               format = {\"D\"}\r\n               maxLength = {22}\r\n              " +
                    " context = {context}/>\r\n");
            
            #line 29 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBInputNumeric)
{
            
            #line default
            #line hidden
            this.Write("<BInputNumeric value = {data.");
            
            #line 32 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n               onChange = {(e: any, value: any) => data.");
            
            #line 33 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = value}\r\n               floatingLabelTextDate = {");
            
            #line 34 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n               maxLength = {10}\r\n               context = {context}/>\r\n");
            
            #line 37 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBAccountComponent)
{
            
            #line default
            #line hidden
            this.Write("<BAccountComponent accountNumber = {data.");
            
            #line 40 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n                   onAccountSelect = {(selectedAccount: any) => data.");
            
            #line 41 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(@" = selectedAccount ? selectedAccount.accountNumber : null}
                   isVisibleBalance={false}
                   isVisibleAccountSuffix={false}
                   enableShowDialogMessagesInCallback={false}
                   isVisibleIBAN={false}
                   ref={(r: any) => this.snaps.SnapName = r}
                   context = {context}/>
");
            
            #line 48 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBCheckBox)
{
            
            #line default
            #line hidden
            this.Write("<BCheckBox checked = {data.");
            
            #line 51 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n           onCheck = {(e: Object, isChecked: boolean) => data.");
            
            #line 52 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = isChecked}\r\n           label = {");
            
            #line 53 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n           context = {context}/>\r\n");
            
            #line 55 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBParameterComponent && ValueTypeIsInt32)
{
            
            #line default
            #line hidden
            this.Write(" <BParameterComponent selectedParamCode = {Helper.numberToString(data.");
            
            #line 58 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(")}\r\n                      onParameterSelect = {(selectedParameter: BOA.Types.Kern" +
                    "el.General.ParameterContract) => data.");
            
            #line 59 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = selectedParameter ? Helper.stringToNumber(selectedParameter.paramCode) : null}" +
                    "\r\n                      paramType =\"");
            
            #line 60 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParamType));
            
            #line default
            #line hidden
            this.Write("\"\r\n                      hintText  = {");
            
            #line 61 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n                      labelText = {");
            
            #line 62 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write(@"}
                      isAllOptionIncluded={true}
                      paramColumns={[
                            { name: ""paramCode"",        header: Message.Code,        visible: false },
                            { name: ""paramDescription"", header: Message.Description, width:   200 }
                      ]}
                      ref = {(r: any) => this.snaps.");
            
            #line 68 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SnapName));
            
            #line default
            #line hidden
            this.Write(" = r}\r\n                      context = {context}/>\r\n\r\n");
            
            #line 71 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBParameterComponent)
{
            
            #line default
            #line hidden
            this.Write(" <BParameterComponent selectedParamCode = {data.");
            
            #line 74 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n                      onParameterSelect = {(selectedParameter: BOA.Types.Kerne" +
                    "l.General.ParameterContract) => data.");
            
            #line 75 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = selectedParameter ? selectedParameter.paramCode : null}\r\n                     " +
                    " paramType =\"");
            
            #line 76 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParamType));
            
            #line default
            #line hidden
            this.Write("\"\r\n                      hintText  = {");
            
            #line 77 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n                      labelText = {");
            
            #line 78 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write(@"}
                      isAllOptionIncluded={true}
                      paramColumns={[
                            { name: ""paramCode"",        header: Message.Code,        visible: false },
                            { name: ""paramDescription"", header: Message.Description, width:   200 }
                      ]}
                      ref = {(r: any) => this.snaps.");
            
            #line 84 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SnapName));
            
            #line default
            #line hidden
            this.Write(" = r}\r\n                      context = {context}/>\r\n\r\n");
            
            #line 87 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
else if(IsBBranchComponent)
{
            
            #line default
            #line hidden
            this.Write("<BBranchComponent selectedBranchId = {data.");
            
            #line 90 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write("}\r\n                  onBranchSelect   = {(selectedBranch: BOA.Common.Types.Branch" +
                    "Contract) => data.");
            
            #line 91 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ValueAccessPath));
            
            #line default
            #line hidden
            this.Write(" = selectedBranch ? selectedBranch.branchId : null}\r\n                  mode      " +
                    " = {\"horizontal\"}\r\n                  labelText  = {");
            
            #line 93 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Label));
            
            #line default
            #line hidden
            this.Write("}\r\n                  sortOption = {BBranchComponent.name}                      \r\n" +
                    "                  context    = {context}/>\r\n\r\n");
            
            #line 97 "D:\github\WhiteStone\BOA.HelperTools\BOAPlugins\FormApplicationGenerator\BoaJsxComponentRenderTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class BoaJsxComponentRenderTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
