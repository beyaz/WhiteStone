<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
import * as React from "react"
import { TransactionPage, TransactionPageComposer } from "b-framework"
import { BAccountComponent } from "b-account-component"
import { BInput } from "b-input"
import { BComboBox } from "b-combo-box"
import { BCheckBox } from "b-check-box"
import { BGridSection } from "b-grid-section"
import { BGridRow } from "b-grid-row"
import { BInputMask } from "b-input-mask"
import { BDateTimePicker } from "b-datetime-picker"
import { BBranchComponent } from "b-branch-component"
import { BParameterComponent } from "b-parameter-component"
import { BInputNumeric } from "b-input-numeric";
import { Helper } from "../utils/Helper";
import { ResourceCode } from "../utils/ResourceCode";
import { FormAssistant } from "../utils/FormAssistant";
import { Message } from "../utils/Message";
import { BFormManager } from "b-form-manager"
import { RequestName} from "../utils/AutoGenerated";
import { <#=ClassName#>Command as CommandName} from "../utils/AutoGenerated";

import Common = BOA.Common.Types;
import BasePageProps = BFramework.BasePageProps;
import <#=RequestName#> =<#=NamespaceNameForType#>.<#=RequestName#>;

<#if(Snaps.Count > 0)#>
<#{#>
    interface ISnaps
    {
<#
int i=0,end = Snaps.Count-1;
for(i=0; i < end;i++)#>
<#{#>
<#var snap= Snaps[i];#>
            <#=snap.Name#>:<#=snap.ComponentTypeName#>,
<#}#>
            <#=Snaps[end].Name#>:<#=Snaps[end].ComponentTypeName#>
    }
<#}#>


class <#=ClassName#> extends BrowsePage
{
<#if(Snaps.Count > 0)#>
<#{#>
    snaps: ISnaps;
<#}#>
    constructor(props: BasePageProps)
    {
        super(props);

        this.connect(this);

        FormAssistant.initialize(this,RequestName.<#=RequestName#>);
<#if(IsTabForm)#>
<#{#>
        this.tabEnabled = true;
<#}#>
    }

    evaluateActionStates()
    {
        if (this.state.pageParams.data)
        {
            this.disableAction(CommandName.New);
        }
    }
<#if(HasWorkFlow)#>
<#{#>
    onActionClick(command: Common.ResourceActionContract, executeWorkFlow: () => void)
    {
        this.executeWorkFlow = executeWorkFlow;

        FormAssistant.executeWindowRequest(this,command.commandName);

        return /*isCompleted*/false;
    }
<#}else {#>
    onActionClick(command: Common.ResourceActionContract)
    {
        FormAssistant.executeWindowRequest(this,command.commandName);

        return /*isCompleted*/true;
    }
<#}#>
    componentDidMount()
    {
        super.componentDidMount();

        FormAssistant.componentDidMount(this);
    }

    proxyDidRespond(proxyResponse: ProxyResponse)
    {
        return FormAssistant.receiveResponse(this,proxyResponse);
    }
<#if(IsTabForm)#>
<#{#>
    renderTab()
    {
        if (!FormAssistant.isReadyToRender(this))
        {
            return [];
        }
        
        const context    = this.state.context;

        const windowRequest = this.assistant.getWindowRequest();
        
        const windowRequest: <#=RequestName#> = FormAssistant.getWindowRequest(this);

        const data       = windowRequest.data;
        const dataSource = windowRequest.dataSource;

        return [
            
        ];
    }
<#} else#>
<#    {#>
    render()
    {
        if (!FormAssistant.isReadyToRender(this))
        {
            return <div/>;
        }

        const context    = this.state.context;

        const windowRequest = this.assistant.getWindowRequest();
        
        const windowRequest: <#=RequestName#> = FormAssistant.getWindowRequest(this);

        const data       = windowRequest.data;
        const dataSource = windowRequest.dataSource;

        return (
            
        );
    }
<#    }#>
    
    

       
}

export default TransactionPageComposer(<#=ClassName#>);