using System;
using System.IO;
using System.Linq;
using BOAPlugins.FormApplicationGenerator.UI;
using BOAPlugins.Utility;

namespace BOAPlugins.TypescriptModelGeneration
{
    [Serializable]
    public class SolutionInfo
    {
        #region Public Properties
        public string AutoGenerated_tsx_FilePath             { get; private set; }
        public string AutoGeneratedModels_tsx_FilePath       { get; private set; }
        public string AutoGeneratedModelsConfig_JsonFilePath { get; private set; }
        public bool   IsValid                                { get; private set; }
        public string SlnFilePath                            { get; private set; }
        public string OneProjectFolder { get; private set; }
        public string FormAssistant_tsx_FilePath { get; private set; }
        #endregion
        public string FilePathOf_FormAssistant_cs_In_Types { get; private set; }
        public string OrchestrationProjectFolder { get; private set; }


        public string TypesProjectFolder { get; private set; }

        #region Public Methods
        public static SolutionInfo CreateFrom(string slnFilePath)
        {
            var data = new SolutionInfo();

            var directory = Path.GetDirectoryName(slnFilePath);

            if (directory == null)
            {
                return data;
            }

            const string configFileName = "AutoGeneratedModelsConfig.json";

            var configFilePath = Directory.GetFiles(directory, "*.json", SearchOption.AllDirectories).FirstOrDefault(f => f.EndsWith(configFileName));
            if (configFilePath == null)
            {
                return data;
            }

            data.AutoGeneratedModelsConfig_JsonFilePath = configFilePath;

            data.AutoGeneratedModels_tsx_FilePath = configFilePath?.Replace(Path.GetFileName(configFilePath), "AutoGeneratedModels.tsx");

            var utilsDirectory = Path.GetDirectoryName(Path.GetDirectoryName(configFilePath)) + Path.DirectorySeparatorChar + "Utils" + Path.DirectorySeparatorChar;

            data.AutoGenerated_tsx_FilePath = utilsDirectory + "AutoGenerated.tsx";

            data.OneProjectFolder = GetOneProjectFolder(slnFilePath);


            data.FormAssistant_tsx_FilePath = data.OneProjectFolder + @"ClientApp\utils\FormAssistant.tsx";

            data.TypesProjectFolder = Path.GetDirectoryName(slnFilePath) + Path.DirectorySeparatorChar + NamingInfo.GetNamespaceNameForType(slnFilePath) + Path.DirectorySeparatorChar;
        

            data.FilePathOf_FormAssistant_cs_In_Types = data.TypesProjectFolder + "FormAssistant.cs";


            data.OrchestrationProjectFolder = Path.GetDirectoryName(slnFilePath) + Path.DirectorySeparatorChar + NamingInfo.GetNamespaceNameForOrchestration(slnFilePath) + Path.DirectorySeparatorChar;


            data.IsValid = true;

            return data;
        }

        

        static string GetOneProjectFolder(string solutionFilePath)
        {
            var namespaceName = NamingInfo.GetSolutionNamespaceName(solutionFilePath);

            var paths = new[]
            {
                Path.GetDirectoryName(solutionFilePath) + Path.DirectorySeparatorChar + @"One\BOA.One.Office." + namespaceName + Path.DirectorySeparatorChar,
                Path.GetDirectoryName(solutionFilePath) + Path.DirectorySeparatorChar + @"One\BOA.One." + namespaceName + Path.DirectorySeparatorChar
            };

            foreach (var path in paths)
            {
                if (Directory.Exists(path))
                {
                    return path;
                }
            }

            throw new InvalidOperationException("One project folder not found." + string.Join(Environment.NewLine, paths));
        }

        #endregion
    }
}