<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WhiteStone</name>
    </assembly>
    <members>
        <member name="T:BOA.Common.Helpers.BinarySerialization">
            <summary>
                The binary serialization
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.BinarySerialization.Deserialize(System.Byte[],System.Runtime.Serialization.SerializationBinder)">
            <summary>
                Deserializes the specified byte array.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.BinarySerialization.Deserialize(System.Byte[])">
            <summary>
                Deserializes the specified byte array.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.BinarySerialization.Deserialize``1(System.Byte[])">
            <summary>
                Deserializes the specified byte array.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.BinarySerialization.Serialize(System.Object)">
            <summary>
                Serializes the specified instance.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.BindingPathExpressionHelper">
            <summary>
                The binding path expression helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.BindingPathExpressionHelper.GetBindingPath``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the binding path.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.BindingPathExpressionHelper.NameofAllPath(System.Linq.Expressions.MemberExpression)">
            <summary>
                Nameofs all path.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.CompressionHelper">
            <summary>
                The compression helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.CompressionHelper.Compress(System.Byte[])">
            <summary>
                Compresses the specified data.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.CompressionHelper.Decompress(System.Byte[])">
            <summary>
                Decompresses the specified data.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.ConfigHelper">
            <summary>
                The configuration helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ConfigHelper.GetFromAppSetting(System.String)">
            <summary>
                Gets from application setting.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ConfigHelper.GetBooleanFromAppSetting(System.String)">
            <summary>
                Gets the boolean from application setting.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.DateTimeExtensions">
            <summary>
                The date time extensions
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.DateTimeExtensions.EqualsIgnoreKind(System.DateTime,System.DateTime)">
            <summary>
                Equalses the kind of the ignore.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.DateTimeExtensions.TruncateMilliseconds(System.DateTime)">
            <summary>
                Truncates the milliseconds.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.EmbeddedAssembly">
            <summary>
                The embedded assembly
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.EmbeddedAssembly.LocationMap">
            <summary>
                The location map
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedAssembly.AddAssembly(System.String,System.String,System.String)">
            <summary>
                Adds the assembly.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedAssembly.AttachToCurrentDomain">
            <summary>
                Attaches to current domain.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedAssembly.DomainAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
                Domains the assembly resolve.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.EmbeddedResourceHelper">
            <summary>
                The embedded resource helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedResourceHelper.Extract(System.String,System.String,System.String,System.String)">
            <summary>
                Extracts the specified name space.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedResourceHelper.ReadFile(System.String,System.String,System.String)">
            <summary>
                Extracts the specified name space.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData">
            <summary>
                The embedded zipped assembly resolver data
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData.AppDomain">
            <summary>
                Gets or sets the application domain.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData.Assembly">
            <summary>
                Gets or sets the assembly.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData.EmbeddedResourcePathInAssembly">
            <summary>
                Gets or sets the embedded resource path in assembly.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData.OutDir">
            <summary>
                Gets the out dir.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData.TargetFilePath">
            <summary>
                Gets the target file path.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver">
            <summary>
                The embedded zipped assembly resolver
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.Attach(BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData)">
            <summary>
                Attaches the specified data.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.Extract(BOA.Common.Helpers.EmbeddedZippedAssemblyResolverData)">
            <summary>
                Extracts the specified name space.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.ReadAllWriteToOutput(System.IO.Stream,System.IO.Stream)">
            <summary>
                Reads all write to output.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.AssemblyResolver">
            <summary>
                The assembly resolver
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.AssemblyResolver.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.AssemblyResolver" /> class.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.AssemblyResolver.BinDirectory">
            <summary>
                Gets the bin directory.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.EmbeddedZippedAssemblyResolver.AssemblyResolver.Resolve(System.Object,System.ResolveEventArgs)">
            <summary>
                Resolves the specified sender.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.ExceptionHelper">
            <summary>
                The exception helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ExceptionHelper.AddData``1(``0,System.String,System.Object)">
            <summary>
                Adds the data.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.FileHelper">
            <summary>
                The file helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.AppendToEndOfFile(System.String,System.String)">
            <summary>
                Appends to end of file.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
                Copy the directories
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.CreateDirectoryIfNotExists(System.String)">
            <summary>
                Creates the directory if not exists.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.DownloadFile(System.String,System.String,System.Boolean)">
            <summary>
                Downloads the file.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.DownloadFileWithProxy(System.String,System.String,System.String)">
            <summary>
                Downloads the file.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.DownloadString(System.String)">
            <summary>
                Downloads the string.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.IsFileLocked(System.String)">
            <summary>
                Determines whether [is file locked] [the specified path].
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.ListenForSave(System.Windows.Threading.Dispatcher,System.String,System.Action)">
            <summary>
                Listens for save.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.ReadFile(System.String)">
            <summary>
                Reads the file.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.RemoveReadOnlyFlag(System.String)">
            <summary>
                Removes the read only flag.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.FileHelper.WriteAllText(System.String,System.String)">
            <summary>
                Writes all text.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.JsonHelper">
            <summary>
                The json helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.JsonHelper.Deserialize``1(System.String)">
            <summary>
                Deserializes the specified serialized content.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.JsonHelper.Deserialize(System.String,System.Type)">
            <summary>
                Deserializes the specified serialized content.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.JsonHelper.DeserializeWithTypeName(System.String)">
            <summary>
                Deserializes the name of the with type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.JsonHelper.Serialize(System.Object)">
            <summary>
                Serializes the specified value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.JsonHelper.SerializeWithTypeName(System.Object)">
            <summary>
                Serializes the name of the with type.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.Log">
            <summary>
                The log
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.Log.Directory">
            <summary>
                Gets the directory.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.Log.Indent">
            <summary>
                Gets or sets the indent.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Log.IsNull(System.String,System.String)">
            <summary>
                Determines whether the specified message is null.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Log.Push(System.Exception,System.String)">
            <summary>
                Pushes the specified exception.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Log.Push(System.String,System.String)">
            <summary>
                Pushes the specified message.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Log.Push``1(``0,System.String)">
            <summary>
                Pushes the specified instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Log.PushInternal(System.String,System.String)">
            <summary>
                Pushes the specified message.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.PaddedStringBuilder">
            <summary>
                The padded string builder
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.PaddedStringBuilder.PaddingCount">
            <summary>
                Gets or sets the padding count.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.PaddedStringBuilder.PaddingLength">
            <summary>
                Gets or sets the length of the padding.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.PaddedStringBuilder.Padding">
            <summary>
                Gets the padding.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PaddedStringBuilder.Append(System.String)">
            <summary>
                Appends the specified value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PaddedStringBuilder.AppendAll(System.String)">
            <summary>
                Appends all.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PaddedStringBuilder.AppendLine(System.String)">
            <summary>
                Appends the line.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PaddedStringBuilder.AppendLine">
            <summary>
                Appends the line.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PaddedStringBuilder.AppendWithPadding(System.String)">
            <summary>
                Appends the with padding.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PaddedStringBuilder.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.PipeLine">
            <summary>
                The pipe line
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PipeLine.Run``1(``0,System.Action{``0}[])">
            <summary>
                Runs the specified parameter.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.ReflectionHelper">
            <summary>
                The reflection helper
            </summary>
            <summary>
                Utility methods for reflection operations.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter">
            <summary>
                The object to c sharp code exporter
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.Comma">
            <summary>
                The comma
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.Dot">
            <summary>
                The dot
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.EnglishCultureName">
            <summary>
                The english culture name
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.LeftBrace">
            <summary>
                The left brace
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.LeftParenthesis">
            <summary>
                The left parenthesis
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.Padding">
            <summary>
                The padding
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.RightBrace">
            <summary>
                The right brace
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.RightParenthesis">
            <summary>
                The right parenthesis
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.UnresolvedSymbol">
            <summary>
                The unresolved symbol
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.EnglishCulture">
            <summary>
                The english culture
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter._objectCreationStack">
            <summary>
                The object creation stack
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.UsingList">
            <summary>
                The using list
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter._sb">
            <summary>
                The sb
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter._currentPadding">
            <summary>
                The current padding
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.Export(System.Object)">
            <summary>
                Exports the specified object.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.CleanGenericTypeName(System.String,System.Int32)">
            <summary>
                Cleans the name of the generic type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.GetDefaultValueFromType(System.Type)">
            <summary>
                Gets the default type of the value from.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.IsInstanceOfGeneric(System.Type,System.Object)">
            <summary>
                Determines whether [is instance of generic] [the specified target type].
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.IsNumericType(System.Type)">
            <summary>
                Determines whether [is numeric type] [the specified type].
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.Append(System.String)">
            <summary>
                Appends the specified value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.AppendLine(System.String)">
            <summary>
                Appends the line.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.AppendLine">
            <summary>
                Appends the line.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.AppendNoPadding(System.String)">
            <summary>
                Appends the no padding.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.GetTypeName(System.Type)">
            <summary>
                Gets the name of the type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.GetTypeName(System.String)">
            <summary>
                Gets the name of the type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.PaddingBack">
            <summary>
                Paddings the back.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.PaddingNext">
            <summary>
                Paddings the next.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.Write(System.Object)">
            <summary>
                Writes the specified object.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ObjectToCSharpCodeExporter.WritePadding">
            <summary>
                Writes the padding.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.CreateAssemblyResolveHandler(System.String)">
            <summary>
                Creates the assembly resolve handler.
            </summary>
            <param name="binDirectoryPath">The bin directory path.</param>
            <returns></returns>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.AddAssemblySearchDirectory(System.AppDomain,System.String)">
            <summary>
                Adds the assembly search directory.
            </summary>
            <param name="domain">The domain.</param>
            <param name="binDirectoryPath">The bin directory path.</param>
        </member>
        <member name="P:BOA.Common.Helpers.ReflectionHelper.AllBindings">
            <summary>
                BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance |
                BindingFlags.Static
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.Clone``1(``0)">
            <summary>
                Perform a deep Copy of the object.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.CopyProperties``1(System.Data.DataRow,``0)">
            <summary>
                Copies all properties to <paramref name="destination" /> instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ExportObjectToCSharpCode(System.Object)">
            <summary>
                Exports <paramref name="instance" /> to c# code initialization
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.GetDefaultValue(System.Type)">
            <summary>
                Gets default value of <paramref name="type" />
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.GetMethod(System.String)">
            <summary>
                Gets the method.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.GetPublicNonStaticField(System.Type,System.String)">
            <summary>
                Gets the public non static field.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.GetPublicNonStaticProperty(System.Type,System.String,System.Boolean)">
            <summary>
                Gets the public non static property.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ReadEmbeddedResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
                Reads embeded resource as string.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ToList``1(System.Data.DataTable)">
            <summary>
                Returns rows as given type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.ToList``1(System.Data.DataColumn)">
            <summary>
                Returns data table row values as given type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ReflectionHelper.TrySetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
                Returns true if operations is successfull else is value type is not suitable for property then returns false
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.SpaceCaseInsensitiveComparator">
            <summary>
                The space case insensitive comparator
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.SpaceCaseInsensitiveComparator._culture">
            <summary>
                The culture
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.SpaceCaseInsensitiveComparator._ignoreLines">
            <summary>
                The ignore lines
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SpaceCaseInsensitiveComparator.#ctor(System.Globalization.CultureInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Common.Helpers.SpaceCaseInsensitiveComparator" /> class.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SpaceCaseInsensitiveComparator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Common.Helpers.SpaceCaseInsensitiveComparator" /> class.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SpaceCaseInsensitiveComparator.Compare(System.String,System.String)">
            <summary>
                Compares the specified left.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SpaceCaseInsensitiveComparator.IgnoreLines(System.Func{System.String,System.Boolean})">
            <summary>
                Ignores the lines.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SpaceCaseInsensitiveComparator.ExceptChars(System.String,System.Char[])">
            <summary>
                Excepts the chars.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.SqlCommandDumper">
            <summary>
                The SQL command dumper
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.SqlCommandDumper.FormatCulture">
            <summary>
                The format culture
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.AsExecutableSqlStatement(System.Data.SqlClient.SqlCommand)">
            <summary>
                Ases the executable SQL statement.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.ReplaceSingleQuote(System.String)">
            <summary>
                Replaces a single quote to a double single quote.
            </summary>
            <param name="sql"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">sql</exception>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.ConvertToParams(System.Collections.Generic.IList{System.Data.SqlClient.SqlParameter})">
            <summary>
                Converts to parameters.
            </summary>
            <param name="sqlParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.GetCommandType(System.String)">
            <summary>
                Gets the type of the command.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.CreateExecutableQueryStatement(System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter})">
            <summary>
                Creates a T-SQL notation for a SQL Query that can be executed in Sql server management studio.
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.CreateExecutableSqlStatement(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter})">
            <summary>
                Creates a SQL-string with the parameter declaration and the sql statement so it can be executed in Sql Server
                Management studio.
            </summary>
            <param name="sql"></param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">sql</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.CreateExecutableStoredProcedureStatement(System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter})">
            <summary>
                Creates a T-SQL notation for a stored procedure that can be executed in Sql server management studio.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.CreateParameterText(System.Data.SqlClient.SqlParameter)">
            <summary>
                Creates a parameter declaration for a query.
            </summary>
            <param name="dbParameter"></param>
            <returns></returns>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.GetParameterDeclaration(System.Data.SqlClient.SqlParameter)">
            <summary>
                Formats the declaration of the the sql parameter to text. (declare @myparam int)
            </summary>
            <param name="dbParameter">The database parameter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dbParameter</exception>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.GetParameterValue(System.Data.SqlClient.SqlParameter)">
            <summary>
                Formats the value of the the sql parameter to text.
            </summary>
            <param name="sqlParameter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">sqlParameter</exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:BOA.Common.Helpers.SqlCommandDumper.ToList(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
                To the list.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:BOA.Common.Helpers.TraceFileHelper">
            <summary>
                The trace file helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.TraceFileHelper.PushToFile(System.String,System.Object)">
            <summary>
                Pushes to file.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.TraceFileHelper.Read``1(System.String)">
            <summary>
                Reads the specified file path.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.XmlHelper">
            <summary>
                The XML helper.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.AddAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
                Adds the attribute.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.ClearXml(System.String)">
            <summary>
                Clears the XML.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.ForOwnAndChildNodes(System.Xml.XmlNode,System.Action{System.Xml.XmlNode})">
            <summary>
                Fors the own and child nodes.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.GetAllNamespaces(System.Xml.XmlDocument)">
            <summary>
                Gets all namespaces.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.GetRootNode(System.String)">
            <summary>
                Gets the root node.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.PrettyXml(System.String)">
            <summary>
                Pretties the XML.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.RemoveFromParent(System.Xml.XmlNode)">
            <summary>
                Removes from parent.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.XmlHelper.ToList(System.Xml.XmlNodeList)">
            <summary>
                To the list.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.ZipAssemblyResolver">
            <summary>
                The zip assembly resolver
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipAssemblyResolver.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Common.Helpers.ZipAssemblyResolver" /> class.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.ZipAssemblyResolver.ZipFilePath">
            <summary>
                Gets the zip file path.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipAssemblyResolver.AttachToCurrentDomain">
            <summary>
                Attaches to current domain.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipAssemblyResolver.DomainAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
                Domains the assembly resolve.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.ZipHelper">
            <summary>
                The zip helper
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.CompressFiles(System.String,System.String[])">
            <summary>
                Compresses the files.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.CompressFiles(System.String,System.String[],System.String)">
            <summary>
                Compresses the files.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.ExtractFromZipFile(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
                Extracts the content from a .zip file inside an specific folder.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.HasEntry(System.String,System.String)">
            <summary>
                Determines whether the specified zip file path has file.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.HasEntry(System.String,System.String,System.String)">
            <summary>
                Determines whether the specified zip file path has file.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.UnZip(System.String,System.String)">
            <summary>
                Extracts the content from a .zip file inside an specific folder.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.UnZip(System.String)">
            <summary>
                Extracts the content from a .zip file inside an specific folder.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ZipHelper.AddFile(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
                Adds the file.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.Cast">
            <summary>
                Utility methods for casting operations
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Cast.ConvertTo(System.IConvertible,System.Type,System.IFormatProvider)">
            <summary>
                Converts to.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Cast.To``1(System.IConvertible,System.IFormatProvider)">
            <summary>
                To the specified provider.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Cast.To``1(System.IConvertible)">
            <summary>
                To the specified value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Cast.To(System.Object,System.Type,System.IFormatProvider)">
            <summary>
                To the specified value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Cast.To``1(System.Object,System.IFormatProvider)">
            <summary>
                Casts value to 'TTargetType'
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Cast.To``1(System.Object)">
            <summary>
                Casts value to 'TTargetType'
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.Cast.DoCasting``1(System.Object)">
            <summary>
                Does the casting.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.ExpressionUtility">
            <summary>
                Defines the expression utility.
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.ExpressionUtility.Dot">
            <summary>
                The dot
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ExpressionUtility.AccessPathOf``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Returns accesses the path of given expression.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.ExpressionUtility.NameofAllPath(System.Linq.Expressions.MemberExpression)">
            <summary>
                Nameofs all path.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.RandomValue">
            <summary>
                The random value
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue._random">
            <summary>
                The random
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportedCollectionTypesForList">
            <summary>
                The supported collection types for list
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportedTypes">
            <summary>
                The supported types
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue._objectCreationStack">
            <summary>
                The object creation stack
            </summary>
        </member>
        <member name="E:BOA.Common.Helpers.RandomValue.PropertyValueAssigned">
            <summary>
                Occurs when [property value assigned].
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.RandomValue.SupportType">
            <summary>
                The support type
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportType.NotSupported">
            <summary>
                The not supported
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportType.UserDefined">
            <summary>
                The user defined
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportType.Basic">
            <summary>
                The basic
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportType.Enum">
            <summary>
                The enum
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportType.Collection">
            <summary>
                The collection
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.RandomValue.SupportType.Nullable">
            <summary>
                The nullable
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Boolean">
            <summary>
                Booleans this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Byte(System.Byte)">
            <summary>
                Bytes the specified maximum possible value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Char">
            <summary>
                Characters this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.DateTime(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Dates the time.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.DateTimeOffset">
            <summary>
                Dates the time offset.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Decimal(System.Decimal)">
            <summary>
                Decimals the specified maximum possible value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Double">
            <summary>
                Doubles this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Enum``1">
            <summary>
                Enums this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Enum(System.Type)">
            <summary>
                Enums the specified enum type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Guid">
            <summary>
                GUIDs this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Int16(System.Int16)">
            <summary>
                Int16s the specified maximum possible value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Int32(System.Int32,System.Int32)">
            <summary>
                Int32s the specified maximum possible value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Int64(System.Int64)">
            <summary>
                Int64s the specified maximum possible value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.ListOf``1(System.Nullable{System.Int32})">
            <summary>
                Lists the of.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Object``1">
            <summary>
                Objects this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Object``1(System.Action{``0})">
            <summary>
                Objects the specified after random object created.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.SByte(System.SByte)">
            <summary>
                ses the byte.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Single">
            <summary>
                Singles this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.String">
            <summary>
                Strings this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.String(System.Int32)">
            <summary>
                Strings the specified string length.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.TimeSpan">
            <summary>
                Times the span.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.UInt16(System.UInt16)">
            <summary>
                us the int16.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.UInt32(System.UInt32)">
            <summary>
                us the int32.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.UInt64(System.UInt64)">
            <summary>
                us the int64.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Array``1(System.Nullable{System.Int32})">
            <summary>
                Arrays the specified optional length.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Collection``1(System.Nullable{System.Int32})">
            <summary>
                Collections the specified optional length.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Dictionary``2(System.Nullable{System.Int32})">
            <summary>
                Dictionaries the specified optional length.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.ICollection``1(System.Nullable{System.Int32})">
            <summary>
                is the collection.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IDictionary``2(System.Nullable{System.Int32})">
            <summary>
                is the dictionary.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IEnumerable``1">
            <summary>
                is the enumerable.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IEnumerable``1(System.Nullable{System.Int32})">
            <summary>
                is the enumerable.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IList``1(System.Nullable{System.Int32})">
            <summary>
                is the list.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.LazyIEnumerable``1">
            <summary>
                Lazies the i enumerable.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.LazyIEnumerable(System.Type)">
            <summary>
                Lazies the i enumerable.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.List``1(System.Nullable{System.Int32})">
            <summary>
                Lists the specified optional length.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.Object(System.Type)">
            <summary>
                Objects the specified type.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.ObservableCollection``1(System.Nullable{System.Int32})">
            <summary>
                Observables the collection.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.CreateRandomLengthIfOptionLengthIsNull(System.Nullable{System.Int32})">
            <summary>
                Creates the random length if option length is null.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.GetSupportType(System.Type)">
            <summary>
                Gets the type of the support.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IsNullableType(System.Type)">
            <summary>
                Determines whether [is nullable type] [the specified property type].
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IsSupportedCollection(System.Type)">
            <summary>
                Determines whether [is supported collection] [the specified property type].
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.PropertyHasNoSetter(System.Reflection.PropertyInfo)">
            <summary>
                Properties the has no setter.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.GetListMethodOfCollections(System.Type,System.Type)">
            <summary>
                Gets the list method of collections.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.GetMethodCallAssociatedWithType(System.Type)">
            <summary>
                Gets the type of the method call associated with.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.ICollection(System.Type,System.Nullable{System.Int32})">
            <summary>
                is the collection.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IDictionary(System.Type,System.Type,System.Nullable{System.Int32})">
            <summary>
                is the dictionary.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IEnumerable(System.Type,System.Nullable{System.Int32})">
            <summary>
                is the enumerable.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.IList(System.Type,System.Nullable{System.Int32})">
            <summary>
                is the list.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.NullableMethodCall(System.Type)">
            <summary>
                Nullables the method call.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.RandomValue.TryInitProperty``1(System.Reflection.PropertyInfo,``0)">
            <summary>
                Tries the initialize property.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.PropertyValueAssignedEventArgs">
            <summary>
                The property value assigned event arguments
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.PropertyValueAssignedEventArgs.#ctor(System.Reflection.PropertyInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Common.Helpers.PropertyValueAssignedEventArgs" /> class.
            </summary>
        </member>
        <member name="P:BOA.Common.Helpers.PropertyValueAssignedEventArgs.PropertyInfo">
            <summary>
                Gets the property information.
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.SM">
            <summary>
                Defines the Service Manager.
            </summary>
        </member>
        <member name="F:BOA.Common.Helpers.SM._serviceHash">
            <summary>
                The service hash
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SM.Get``1">
            <summary>
                Gets this instance.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SM.GetService(System.String)">
            <summary>
                Gets the service.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SM.HasValue``1">
            <summary>
                Determines whether this instance has value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SM.Set``1(``0)">
            <summary>
                Sets the specified value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.SM.SetService(System.String,System.Object)">
            <summary>
                Sets service instance
            </summary>
        </member>
        <member name="T:BOA.Common.Helpers.StringHelper">
            <summary>
                Utility methods for string class.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.HasValue(System.String)">
            <summary>
                Determines whether this instance has value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.IsEqualAsData(System.String,System.String)">
            <summary>
                Determines whether [is equal as data] [the specified left].
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.IsEqualAsData(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
                Determines whether [is equal as data] [the specified left].
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.IsNullOrEmpty(System.String)">
            <summary>
                Indicates whether the specified string is null or an System.String.Empty
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
                Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.IsStartsWith(System.String,System.String)">
            <summary>
                Compare strings using ordinal sort rules.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.Remove(System.String,System.String)">
            <summary>
                Removes the specified value.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.RemoveFromEnd(System.String,System.String)">
            <summary>
                Removes value from end of str
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.RemoveFromEnd(System.String,System.String,System.StringComparison)">
            <summary>
                Removes from end.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.RemoveFromStart(System.String,System.String)">
            <summary>
                Removes value from start of str
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.RemoveFromStart(System.String,System.String,System.StringComparison)">
            <summary>
                Removes value from start of str
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.SplitAndClear(System.String,System.String)">
            <summary>
                Splits the and clear.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.SplitToLines(System.String)">
            <summary>
                Splits to lines.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.ToLowerAndClearSpaces(System.String)">
            <summary>
                To the lower and clear spaces.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.ToLowerAndClearSpaces(System.String,System.Globalization.CultureInfo)">
            <summary>
                To the lower and clear spaces.
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.ToLowerEN(System.String)">
            <summary>
                Returns a copy of this string converted to lowercase, using the casing rules of 'English' culture
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.ToLowerTR(System.String)">
            <summary>
                Returns a copy of this string converted to lowercase, using the casing rules of 'Turkish' culture
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.ToUpperEN(System.String)">
            <summary>
                Returns a copy of this string converted to uppercase, using the casing rules of 'English' culture
            </summary>
        </member>
        <member name="M:BOA.Common.Helpers.StringHelper.ToUpperTR(System.String)">
            <summary>
                Returns a copy of this string converted to uppercase, using the casing rules of Turkish culture
            </summary>
        </member>
        <member name="M:BOA.Common.CacheManager.ClearCache">
            <summary>
                Clears all cache.
            </summary>
        </member>
        <member name="M:BOA.Common.CacheManager.GetValue(System.String)">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="T:BOA.Common.Proxy">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:BOA.Common.Proxy.Port">
            <summary>
                The port
            </summary>
        </member>
        <member name="F:BOA.Common.Proxy.Url">
            <summary>
                The URL
            </summary>
        </member>
        <member name="F:BOA.Common.Proxy.UrlWithPort">
            <summary>
                The URL with port
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.EnglishBank.WordInfo">
            <summary>
                The word information
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.EnglishBank.WordInfo.Details">
            <summary>
                Gets or sets the details.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.EnglishBank.WordInfo.Key">
            <summary>
                Gets or sets the key.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Google.Translator">
            <summary>
                The translator
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Google.Translator.Translate(System.String,System.String,System.String)">
            <summary>
                Translate2s the specified text2.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Google.Translator.TranslateEnglishToTurkish(System.String)">
            <summary>
                Translates the english to turkish.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Google.Translator.TranslateTurkishToEnglish(System.String)">
            <summary>
                Translates the turkish to english.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Longman.Translator">
            <summary>
                The translator
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.Translator.GetWordInfo(System.String)">
            <summary>
                Gets the word information.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.Translator.Load(BOA.LanguageTranslations.Longman.WordInfo)">
            <summary>
                Loads the specified word information.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.Translator.InitializeTurkish(BOA.LanguageTranslations.Longman.WordInfo)">
            <summary>
                Initializes the turkish.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.Translator.ParseDictentry(HtmlAgilityPack.HtmlNode)">
            <summary>
                Parses the dictentry.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.Translator.ParseExample(HtmlAgilityPack.HtmlNode)">
            <summary>
                Parses the example.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.Translator.ParseUsageInfo(HtmlAgilityPack.HtmlNode)">
            <summary>
                Parses the usage information.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Longman.Entry">
            <summary>
                The entry
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.Entry.Topics">
            <summary>
                Gets or sets the topics.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.Entry.Usages">
            <summary>
                Gets or sets the usages.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Longman.UsageInfo">
            <summary>
                The usage information
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.UsageInfo.Examples">
            <summary>
                Gets or sets the examples.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.UsageInfo.FullDefinition">
            <summary>
                Gets or sets the full definition.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.UsageInfo.FullDefinitionTR">
            <summary>
                Gets or sets the full definition.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.UsageInfo.ShortDefinition">
            <summary>
                Gets or sets the short definition.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.UsageInfo.ShortDefinitionTR">
            <summary>
                Gets or sets the short definition.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Longman.Example">
            <summary>
                The example
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.Example.MediaFilePath">
            <summary>
                Gets or sets the media file path.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.Example.Text">
            <summary>
                Gets or sets the text.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.Example.TextTR">
            <summary>
                Gets or sets the text.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Longman.WordInfo">
            <summary>
                The longman word information
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.WordInfo.Dictentries">
            <summary>
                Gets or sets the dictentries.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.WordInfo.SkipInitializeTurkish">
            <summary>
                Gets or sets a value indicating whether [skip initialize turkish].
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Longman.WordInfo.Word">
            <summary>
                Gets or sets the word.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Longman.WordInfoViewBuilder">
            <summary>
                The word information view builder
            </summary>
        </member>
        <member name="F:BOA.LanguageTranslations.Longman.WordInfoViewBuilder._wordInfo">
            <summary>
                The word information
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.WordInfoViewBuilder.#ctor(BOA.LanguageTranslations.Longman.WordInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.LanguageTranslations.Longman.WordInfoViewBuilder" /> class.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.WordInfoViewBuilder.Create">
            <summary>
                Creates this instance.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.WordInfoViewBuilder.Render(BOA.LanguageTranslations.Longman.Entry)">
            <summary>
                Renders the specified data.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.WordInfoViewBuilder.Render(BOA.LanguageTranslations.Longman.UsageInfo)">
            <summary>
                Renders the specified data.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Longman.WordInfoViewBuilder.Render(BOA.LanguageTranslations.Longman.Example)">
            <summary>
                Renders the specified data.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.TedTalksSubtitle.Normalizer">
            <summary>
                The normalizer
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.TedTalksSubtitle.Normalizer.Normalize(System.String)">
            <summary>
                Normalizes the specified content.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.TedTalksSubtitle.Normalizer.NormalizeFile(System.String)">
            <summary>
                Normalizes the file.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.WordInfo">
            <summary>
                The word information
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.WordInfo.Means">
            <summary>
                Gets or sets the sample sentences.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.WordInfo.TurkishPronanciation">
            <summary>
                Gets or sets the turkish pronanciation.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.WordInfo.Word">
            <summary>
                Gets or sets the word.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.MeanInfo">
            <summary>
                The word information
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.MeanInfo.Definition">
            <summary>
                Gets or sets the definition.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.MeanInfo.SampleSentences">
            <summary>
                Gets or sets the sample sentences.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Yandex.Translator">
            <summary>
                The translator
            </summary>
        </member>
        <member name="F:BOA.LanguageTranslations.Yandex.Translator._apiKey">
            <summary>
                The API key
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Yandex.Translator.Translate(System.String,System.String)">
            <summary>
                Translates the specified language.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Yandex.Translator.TranslateEnglishToTurkish(System.String)">
            <summary>
                Translates the english to turkish.
            </summary>
        </member>
        <member name="M:BOA.LanguageTranslations.Yandex.Translator.TranslateTurkishToEnglish(System.String)">
            <summary>
                Translates the turkish to english.
            </summary>
        </member>
        <member name="T:BOA.LanguageTranslations.Yandex.Translator.TranslateData">
            <summary>
                The translate data
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Yandex.Translator.TranslateData.code">
            <summary>
                Gets or sets the code.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Yandex.Translator.TranslateData.lang">
            <summary>
                Gets or sets the language.
            </summary>
        </member>
        <member name="P:BOA.LanguageTranslations.Yandex.Translator.TranslateData.text">
            <summary>
                Gets or sets the text.
            </summary>
        </member>
        <member name="T:BOA.UI.Common.Tracer">
            <summary>
                The tracer
            </summary>
        </member>
        <member name="P:BOA.UI.Common.Tracer.TraceHandler">
            <summary>
                Gets or sets the trace handler.
            </summary>
        </member>
        <member name="M:BOA.UI.Common.Tracer.PrepareMessage``1(``0,System.Object,System.String,System.String,System.Int32)">
            <summary>
                Prepares the message.
            </summary>
        </member>
        <member name="M:BOA.UI.Common.Tracer.Trace``1(``0,System.Object,System.String,System.String,System.Int32)">
            <summary>
                Traces the specified trace message.
            </summary>
        </member>
        <member name="T:BOA.UI.Common.TraceHandlerForSpecificFile">
            <summary>
                The trace handler for specific file
            </summary>
        </member>
        <member name="M:BOA.UI.Common.TraceHandlerForSpecificFile.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.UI.Common.TraceHandlerForSpecificFile" /> class.
            </summary>
        </member>
        <member name="M:BOA.UI.Common.TraceHandlerForSpecificFile.Write(System.String)">
            <summary>
                Writes the specified message.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.Pair">
            <summary>
                The pair
            </summary>
        </member>
        <member name="M:BOA.UI.Types.Pair.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.UI.Types.Pair" /> class.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.Pair.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.UI.Types.Pair" /> class.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.Pair.Key">
            <summary>
                Gets or sets the key.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.Pair.Value">
            <summary>
                Gets or sets the value.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.DataGridColumnInfo">
            <summary>
                The data grid column information
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridColumnInfo.BindingPath">
            <summary>
                Gets or sets the binding path.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridColumnInfo.IsBoolean">
            <summary>
                Gets or sets the is boolean.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridColumnInfo.IsDate">
            <summary>
                Gets or sets the is date.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridColumnInfo.IsDecimal">
            <summary>
                Gets or sets the is decimal.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridColumnInfo.IsInt32">
            <summary>
                Gets or sets the is int32.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridColumnInfo.IsString">
            <summary>
                Gets or sets the is string.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridColumnInfo.Label">
            <summary>
                Gets or sets the label.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridColumnInfo.InitializeDataType(BOA.UI.Types.DataGridColumnInfo,System.Reflection.PropertyInfo)">
            <summary>
                Initializes the type of the data.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.DataGridRowBackgroundInfo">
            <summary>
                The data grid row background information
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridRowBackgroundInfo.BindingPath">
            <summary>
                Gets or sets the binding path.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridRowBackgroundInfo.Color">
            <summary>
                Gets or sets the color.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.DataGridInfo">
            <summary>
                The data grid information
            </summary>
        </member>
        <member name="F:BOA.UI.Types.DataGridInfo.ConstMessagesClass">
            <summary>
                The constant messages class
            </summary>
        </member>
        <member name="F:BOA.UI.Types.DataGridInfo.MessagingPattern">
            <summary>
                The messaging pattern
            </summary>
        </member>
        <member name="F:BOA.UI.Types.DataGridInfo.recordType">
            <summary>
                The record type
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridInfo.Columns">
            <summary>
                Gets or sets the columns.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridInfo.RecordType">
            <summary>
                Gets or sets the type of the record.
            </summary>
        </member>
        <member name="P:BOA.UI.Types.DataGridInfo.RowBackgrounds">
            <summary>
                Gets or sets the row backgrounds.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.Create(System.Type)">
            <summary>
                Creates the specified record type.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.AddColumn``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Adds the column.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.AddColumn``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
                Adds the column.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.AddColumns(System.String[])">
            <summary>
                Adds the columns.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.AddRowBackground``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
                Adds the row background.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.SetMessaging(System.Type,System.Func{System.String,System.String})">
            <summary>
                Sets the messaging.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.SetMessaging(System.Func{System.String,System.String})">
            <summary>
                Sets the messaging.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfo.AddColumn(System.String,System.String)">
            <summary>
                Adds the column.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.PropertyPathResolver">
            <summary>
                The property path resolver
            </summary>
        </member>
        <member name="M:BOA.UI.Types.PropertyPathResolver.Resolve(System.Type,System.String)">
            <summary>
                Resolves the property path.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.BindingPathExpressionHelper">
            <summary>
                The binding path expression helper
            </summary>
        </member>
        <member name="M:BOA.UI.Types.BindingPathExpressionHelper.GetBindingPath``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the binding path.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.BindingPathExpressionHelper.NameofAllPath(System.Linq.Expressions.MemberExpression)">
            <summary>
                Nameofs all path.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.NamingHelper">
            <summary>
                The naming helper
            </summary>
        </member>
        <member name="F:BOA.UI.Types.NamingHelper.CamelCasePropertyNamesContractResolver">
            <summary>
                The camel case property names contract resolver
            </summary>
        </member>
        <member name="M:BOA.UI.Types.NamingHelper.GetBindingPath(System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo})">
            <summary>
                Gets the binding path.
            </summary>
        </member>
        <member name="M:BOA.UI.Types.NamingHelper.GetResolvedPropertyName(System.String)">
            <summary>
                Gets the name of the resolved property.
            </summary>
        </member>
        <member name="T:BOA.UI.Types.DataGridInfoHelper">
            <summary>
                The data grid information helper
            </summary>
        </member>
        <member name="M:BOA.UI.Types.DataGridInfoHelper.Initialize(BOA.UI.Types.DataGridInfo,BOA.UI.Types.DataGridColumnInfo)">
            <summary>
                Initializes the specified grid information.
            </summary>
        </member>
        <member name="T:BOA.DatabaseAccess.IDataRecordHelper">
            <summary>
                The data reader helper
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetBinaryValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the binary value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetBooleanNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the boolean nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetBooleanValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the boolean value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetByteNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the byte nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetByteValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the byte value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetDateTimeNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the date time nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetDateTimeValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the date time value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetDecimalNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the decimal nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetDecimalValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the decimal value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetDoubleNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the double nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetDoubleValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the double value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetGuidValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the GUID value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetInt16NullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the int16 nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetInt16Value(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the int16 value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetInt32NullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the int32 nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetInt32Value(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the int32 value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetInt64NullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the int64 nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetInt64Value(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the int64 value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetSByteNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the s byte nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetSByteValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the s byte value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetSingleNullableValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the single nullable value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetSingleValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the single value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetStringValue(System.Data.IDataRecord,System.String)">
            <summary>
                Gets the string value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDataRecordHelper.GetStringValue(System.Data.IDataRecord,System.String,System.Boolean)">
            <summary>
                Gets the string value.
            </summary>
        </member>
        <member name="T:BOA.DatabaseAccess.Extensions">
            <summary>
                The extensions
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Extensions.GetRecords``1(BOA.DatabaseAccess.Database,System.String,System.Object[])">
            <summary>
                Gets the records.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Extensions.RunScript(BOA.DatabaseAccess.IDatabase,System.String)">
            <summary>
                Runs the script.
            </summary>
        </member>
        <member name="T:BOA.DatabaseAccess.SqlDatabaseLayer">
            <summary>
                The SQL database layer
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.SqlDatabaseLayer.GetConnectionByConnectionName">
            <summary>
                Gets or sets the name of the get connection by connection.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.SqlDatabaseLayer.StartTransaction">
            <summary>
                Gets or sets a value indicating whether [start transaction].
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.SqlDatabaseLayer.Timeout">
            <summary>
                Gets or sets the timeout.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.SqlDatabaseLayer.Connections">
            <summary>
                Gets the connections.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.SqlDatabaseLayer.DataReaders">
            <summary>
                Gets the data readers.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.SqlDatabaseLayer.Transactions">
            <summary>
                Gets the transactions.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
                Adds the in parameter.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.BeginTransaction">
            <summary>
                Begins the transaction.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.CloseConnections">
            <summary>
                Closes the connections.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.CommitTransaction">
            <summary>
                Commits the transaction.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.ExecuteDataTable(System.Data.Common.DbCommand)">
            <summary>
                Executes the data table.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
                Executes the non query.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
                Executes the reader.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.ExecuteScalar``1(System.Data.Common.DbCommand)">
            <summary>
                Executes the scalar.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.GetDBCommand(System.Enum,System.String)">
            <summary>
                Gets the database command.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.GetDBCommand(System.String,System.String)">
            <summary>
                Gets the database command.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.RollbackTransaction">
            <summary>
                Rollbacks the transaction.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.TryAddInParameterForMsSql(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
                Tries the add in parameter for ms SQL.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.TryAddInParameterForMySql(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
                Tries the add in parameter for my SQL.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.CreateDBCommand(System.String,System.String,System.Data.CommandType)">
            <summary>
                Creates the database command.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.GetConnection(System.String,System.Int32)">
            <summary>
                Gets the connection.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.GetDBConnection(System.String)">
            <summary>
                Gets the database connection.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.GetTransaction(System.String,System.Data.Common.DbConnection)">
            <summary>
                Gets the transaction.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.TryCreateDbCommandForMsSql(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Data.CommandType)">
            <summary>
                Tries the create database command for ms SQL.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabaseLayer.TryCreateDbCommandForMySql(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Data.CommandType)">
            <summary>
                Tries the create database command for my SQL.
            </summary>
        </member>
        <member name="T:BOA.DatabaseAccess.SqlDatabase">
            <summary>
                Represents database layer.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabase.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.DatabaseAccess.SqlDatabase" />
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabase.#ctor(System.Data.IDbConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.DatabaseAccess.SqlDatabase" />
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.SqlDatabase.ParameterPrefix">
            <summary>
                Gets prefix of sql parameters.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.SqlDatabase.CreateParameter(System.String,System.Object)">
            <summary>
                Initializes new <see cref="T:System.Data.SqlClient.SqlParameter" /> instance.
            </summary>
        </member>
        <member name="T:BOA.DatabaseAccess.IDatabase">
            <summary>
                Manager interface of sql operations
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.IDatabase.CommandIsStoredProcedure">
            <summary>
                Indicates CommandType is StoredProcedure or Text
            </summary>
            <returns></returns>
        </member>
        <member name="P:BOA.DatabaseAccess.IDatabase.CommandText">
            <summary>
                Command that will be execute
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.IDatabase.CommandTimeout">
            <summary>
                Command timeout value
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.IDatabase.ParameterPrefix">
            <summary>
                Parameter prefix for sql sentences.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.IDatabase.Item(System.String)">
            <summary>
                Adds a parameter to sql command.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:BOA.DatabaseAccess.IDatabase.BeginTransaction">
            <summary>
                Begins database transaction
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDatabase.Commit">
            <summary>
                Commits transaction
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.IDatabase.ExecuteNonQuery">
            <summary>
                Executes command and returns effected row counts
            </summary>
            <returns></returns>
        </member>
        <member name="M:BOA.DatabaseAccess.IDatabase.ExecuteReader">
            <summary>
                Executes command and returns reader
            </summary>
            <returns></returns>
        </member>
        <member name="M:BOA.DatabaseAccess.IDatabase.ExecuteScalar">
            <summary>
                Executes commands ands returns command value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BOA.DatabaseAccess.IDatabase.Rollback">
            <summary>
                Rollback transaction
            </summary>
        </member>
        <member name="T:BOA.DatabaseAccess.Database">
            <summary>
                The database
            </summary>
        </member>
        <member name="F:BOA.DatabaseAccess.Database._command">
            <summary>
                The command
            </summary>
        </member>
        <member name="F:BOA.DatabaseAccess.Database._connection">
            <summary>
                The connection
            </summary>
        </member>
        <member name="F:BOA.DatabaseAccess.Database._transaction">
            <summary>
                The transaction
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.DatabaseAccess.Database" /> class.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.#ctor(System.Data.IDbConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.DatabaseAccess.Database" /> class.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.Database.CommandIsStoredProcedure">
            <summary>
                Indicates CommandType is StoredProcedure or Text
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.Database.CommandText">
            <summary>
                Command that will be execute
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.Database.CommandTimeout">
            <summary>
                Command timeout value
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.Database.Connection">
            <summary>
                Gets the connection.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.Database.ParameterPrefix">
            <summary>
                Parameter prefix for sql sentences.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.Database.Transaction">
            <summary>
                Gets the transaction.
            </summary>
        </member>
        <member name="P:BOA.DatabaseAccess.Database.Item(System.String)">
            <summary>
                Gets or sets the <see cref="T:System.Object" /> with the specified parameter name.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.BeginTransaction">
            <summary>
                Begins database transaction
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.Commit">
            <summary>
                Commits transaction
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.ExecuteNonQuery">
            <summary>
                Executes command and returns effected row counts
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.ExecuteReader">
            <summary>
                Executes command and returns reader
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.ExecuteScalar">
            <summary>
                Executes commands ands returns command value.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.Rollback">
            <summary>
                Rollback transaction
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.CreateParameter(System.String,System.Object)">
            <summary>
                Creates the parameter.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.CreateCommand">
            <summary>
                Creates the command.
            </summary>
        </member>
        <member name="M:BOA.DatabaseAccess.Database.OpenConnection(System.Data.IDbConnection)">
            <summary>
                Opens the connection.
            </summary>
        </member>
        <member name="T:BOA.Office.Excel.CopyPasteStringHelper">
            <summary>
                The copy paste string helper
            </summary>
        </member>
        <member name="F:BOA.Office.Excel.CopyPasteStringHelper.TabCharachter">
            <summary>
                The tab charachter
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.ParseFromString``1(System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Parses from string.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.ParseFromString(System.String)">
            <summary>
                Parses from string.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.ParseFromStringAsDictionary(System.String)">
            <summary>
                Parses from string.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.PrepareForPasteToExcel``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Prepares for paste to excel.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.GetPropertyValueForExcelCell``1(``0,System.String)">
            <summary>
                Gets the property value for excel cell.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.LineToContract``1(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Lines to contract.
            </summary>
        </member>
        <member name="T:BOA.Office.Excel.CopyPasteStringHelper.Reflection">
            <summary>
                The reflection
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.Reflection.GetPropertyType(System.Object,System.String)">
            <summary>
                Gets the type of the property.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.Reflection.GetPropertyValue(System.Object,System.String)">
            <summary>
                Gets the property value.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.CopyPasteStringHelper.Reflection.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
                Sets the property value.
            </summary>
        </member>
        <member name="T:BOA.Office.Excel.Reader">
            <summary>
                The reader
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.Reader.ReadFromFile(System.String,System.String)">
            <summary>
                Read excel file by using oledb connection.
            </summary>
        </member>
        <member name="T:BOA.Office.Excel.Wrapper">
            <summary>
                Defines the excel wrapper.
            </summary>
        </member>
        <member name="F:BOA.Office.Excel.Wrapper._excelApplication">
            <summary>
                The excel application
            </summary>
        </member>
        <member name="F:BOA.Office.Excel.Wrapper._workbook">
            <summary>
                The workbook
            </summary>
        </member>
        <member name="P:BOA.Office.Excel.Wrapper.FilePath">
            <summary>
                Gets or sets the file path.
            </summary>
        </member>
        <member name="P:BOA.Office.Excel.Wrapper.ExcelApplication">
            <summary>
                Gets the excel application.
            </summary>
        </member>
        <member name="P:BOA.Office.Excel.Wrapper.WorkBook">
            <summary>
                Gets the work book.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.Wrapper.Save">
            <summary>
                Saves this instance.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.Wrapper.UpdateCell``1(System.String,System.Int32,System.Int32,``0)">
            <summary>
                Updates the cell.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.Wrapper.KillSpecificExcelFileProcess(System.String)">
            <summary>
                Kills the specific excel file process.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.Wrapper.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:BOA.Office.Excel.Wrapper.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:BOA.Lang.Data.Token">
            <summary>
                The token
            </summary>
        </member>
        <member name="M:BOA.Lang.Data.Token.#ctor(BOA.Lang.Data.TokenType,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Data.Token" /> class.
            </summary>
        </member>
        <member name="M:BOA.Lang.Data.Token.#ctor(BOA.Lang.Data.TokenType)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Data.Token" /> class.
            </summary>
        </member>
        <member name="P:BOA.Lang.Data.Token.TokenType">
            <summary>
                Gets the type of the token.
            </summary>
        </member>
        <member name="P:BOA.Lang.Data.Token.TokenValue">
            <summary>
                Gets the token value.
            </summary>
        </member>
        <member name="M:BOA.Lang.Data.Token.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="T:BOA.Lang.Data.TokenType">
            <summary>
                The token type
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Infer">
            <summary>
                The infer
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Void">
            <summary>
                The void
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.WhiteSpace">
            <summary>
                The white space
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.LBracket">
            <summary>
                The l bracket
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.RBracket">
            <summary>
                The r bracket
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Plus">
            <summary>
                The plus
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Minus">
            <summary>
                The minus
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Equals">
            <summary>
                The equals
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.HashTag">
            <summary>
                The hash tag
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.QuotedString">
            <summary>
                The quoted string
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Word">
            <summary>
                The word
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Comma">
            <summary>
                The comma
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.OpenParenth">
            <summary>
                The open parenth
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.CloseParenth">
            <summary>
                The close parenth
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Asterix">
            <summary>
                The asterix
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Slash">
            <summary>
                The slash
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Carat">
            <summary>
                The carat
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.DeRef">
            <summary>
                The de reference
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Ampersand">
            <summary>
                The ampersand
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Fun">
            <summary>
                The fun
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.GreaterThan">
            <summary>
                The greater than
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.LessThan">
            <summary>
                The less than
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.SemiColon">
            <summary>
                The semi colon
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.If">
            <summary>
                If
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Return">
            <summary>
                The return
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.While">
            <summary>
                The while
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Else">
            <summary>
                The else
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.ScopeStart">
            <summary>
                The scope start
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.EOF">
            <summary>
                The EOF
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.For">
            <summary>
                For
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Float">
            <summary>
                The float
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Print">
            <summary>
                The print
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Dot">
            <summary>
                The dot
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.True">
            <summary>
                The true
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.False">
            <summary>
                The false
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Boolean">
            <summary>
                The boolean
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Or">
            <summary>
                The or
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Int">
            <summary>
                The int
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Double">
            <summary>
                The double
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.String">
            <summary>
                The string
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Method">
            <summary>
                The method
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Class">
            <summary>
                The class
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.New">
            <summary>
                The new
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Compare">
            <summary>
                The compare
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Nil">
            <summary>
                The nil
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.NotCompare">
            <summary>
                The not compare
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Try">
            <summary>
                The try
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.Catch">
            <summary>
                The catch
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.LSquareBracket">
            <summary>
                The l square bracket
            </summary>
        </member>
        <member name="F:BOA.Lang.Data.TokenType.RSquareBracket">
            <summary>
                The r square bracket
            </summary>
        </member>
        <member name="T:BOA.Lang.Exceptions.InvalidSyntax">
            <summary>
                The invalid syntax
            </summary>
        </member>
        <member name="M:BOA.Lang.Exceptions.InvalidSyntax.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Exceptions.InvalidSyntax" /> class.
            </summary>
        </member>
        <member name="T:BOA.Lang.Lexers.Lexer">
            <summary>
                The lexer
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.Lexer.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Lexers.Lexer" /> class.
            </summary>
        </member>
        <member name="P:BOA.Lang.Lexers.Lexer.Matchers">
            <summary>
                Gets or sets the matchers.
            </summary>
        </member>
        <member name="P:BOA.Lang.Lexers.Lexer.Tokenizer">
            <summary>
                Gets or sets the tokenizer.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.Lexer.Lex">
            <summary>
                Lexes this instance.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.Lexer.InitializeMatchList">
            <summary>
                Initializes the match list.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.Lexer.Next">
            <summary>
                Nexts this instance.
            </summary>
        </member>
        <member name="T:BOA.Lang.Lexers.TokenizableStreamBase`1">
            <summary>
                The tokenizable stream base
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.#ctor(System.Func{System.Collections.Generic.List{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Lexers.TokenizableStreamBase`1" /> class.
            </summary>
        </member>
        <member name="P:BOA.Lang.Lexers.TokenizableStreamBase`1.Current">
            <summary>
                Gets the current.
            </summary>
        </member>
        <member name="P:BOA.Lang.Lexers.TokenizableStreamBase`1.Index">
            <summary>
                Gets or sets the index.
            </summary>
        </member>
        <member name="P:BOA.Lang.Lexers.TokenizableStreamBase`1.Items">
            <summary>
                Gets or sets the items.
            </summary>
        </member>
        <member name="P:BOA.Lang.Lexers.TokenizableStreamBase`1.SnapshotIndexes">
            <summary>
                Gets or sets the snapshot indexes.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.CommitSnapshot">
            <summary>
                Commits the snapshot.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.Consume">
            <summary>
                Consumes this instance.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.End">
            <summary>
                Ends this instance.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.Peek(System.Int32)">
            <summary>
                Peeks the specified lookahead.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.RollbackSnapshot">
            <summary>
                Rollbacks the snapshot.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.TakeSnapshot">
            <summary>
                Takes the snapshot.
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.TokenizableStreamBase`1.EOF(System.Int32)">
            <summary>
                EOFs the specified lookahead.
            </summary>
        </member>
        <member name="T:BOA.Lang.Lexers.Tokenizer">
            <summary>
                The tokenizer
            </summary>
        </member>
        <member name="M:BOA.Lang.Lexers.Tokenizer.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Lexers.Tokenizer" /> class.
            </summary>
        </member>
        <member name="T:BOA.Lang.Matches.IMatcher">
            <summary>
                The matcher
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.IMatcher.IsMatch(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether the specified tokenizer is match.
            </summary>
        </member>
        <member name="T:BOA.Lang.Matches.MatcherBase">
            <summary>
                The matcher base
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatcherBase.IsMatch(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether the specified tokenizer is match.
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatcherBase.IsMatchImpl(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether [is match implementation] [the specified tokenizer].
            </summary>
        </member>
        <member name="T:BOA.Lang.Matches.MatchKeyword">
            <summary>
                The match keyword
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchKeyword.#ctor(BOA.Lang.Data.TokenType,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Matches.MatchKeyword" /> class.
            </summary>
        </member>
        <member name="P:BOA.Lang.Matches.MatchKeyword.AllowAsSubString">
            <summary>
                If true then matching on { in a string like "{test" will match the first cahracter
                because it is not space delimited. If false it must be space or special character delimited
            </summary>
        </member>
        <member name="P:BOA.Lang.Matches.MatchKeyword.Match">
            <summary>
                Gets or sets the match.
            </summary>
        </member>
        <member name="P:BOA.Lang.Matches.MatchKeyword.SpecialCharacters">
            <summary>
                Gets or sets the special characters.
            </summary>
        </member>
        <member name="P:BOA.Lang.Matches.MatchKeyword.TokenType">
            <summary>
                Gets or sets the type of the token.
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchKeyword.IsMatchImpl(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether [is match implementation] [the specified tokenizer].
            </summary>
        </member>
        <member name="T:BOA.Lang.Matches.MatchNumber">
            <summary>
                The match number
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchNumber.IsMatchImpl(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether [is match implementation] [the specified tokenizer].
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchNumber.GetIntegers(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Gets the integers.
            </summary>
        </member>
        <member name="T:BOA.Lang.Matches.MatchString">
            <summary>
                The match string
            </summary>
        </member>
        <member name="F:BOA.Lang.Matches.MatchString.QUOTE">
            <summary>
                The quote
            </summary>
        </member>
        <member name="F:BOA.Lang.Matches.MatchString.TIC">
            <summary>
                The tic
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchString.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Matches.MatchString" /> class.
            </summary>
        </member>
        <member name="P:BOA.Lang.Matches.MatchString.StringDelim">
            <summary>
                Gets or sets the string delimiter.
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchString.IsMatchImpl(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether [is match implementation] [the specified tokenizer].
            </summary>
        </member>
        <member name="T:BOA.Lang.Matches.MatchWhiteSpace">
            <summary>
                The match white space
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchWhiteSpace.IsMatchImpl(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether [is match implementation] [the specified tokenizer].
            </summary>
        </member>
        <member name="T:BOA.Lang.Matches.MatchWord">
            <summary>
                The match word
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchWord.#ctor(System.Collections.Generic.IEnumerable{BOA.Lang.Matches.IMatcher})">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Lang.Matches.MatchWord" /> class.
            </summary>
        </member>
        <member name="P:BOA.Lang.Matches.MatchWord.SpecialCharacters">
            <summary>
                Gets or sets the special characters.
            </summary>
        </member>
        <member name="M:BOA.Lang.Matches.MatchWord.IsMatchImpl(BOA.Lang.Lexers.Tokenizer)">
            <summary>
                Determines whether [is match implementation] [the specified tokenizer].
            </summary>
        </member>
        <member name="T:BOA.Services.JsonFile`1">
            <summary>
                The json file
            </summary>
        </member>
        <member name="M:BOA.Services.JsonFile`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BOA.Services.JsonFile`1" /> class.
            </summary>
        </member>
        <member name="P:BOA.Services.JsonFile`1.FilePath">
            <summary>
                Gets the file path.
            </summary>
        </member>
        <member name="M:BOA.Services.JsonFile`1.Delete">
            <summary>
                Deletes this instance.
            </summary>
        </member>
        <member name="M:BOA.Services.JsonFile`1.Load">
            <summary>
                Loads this instance.
            </summary>
        </member>
        <member name="M:BOA.Services.JsonFile`1.Save(`0)">
            <summary>
                Saves the specified configuration.
            </summary>
        </member>
        <member name="T:BOA.Tasks.MSBuildData">
            <summary>
                The ms build data
            </summary>
        </member>
        <member name="P:BOA.Tasks.MSBuildData.BuildOutput">
            <summary>
                Gets the build output.
            </summary>
        </member>
        <member name="P:BOA.Tasks.MSBuildData.ProjectFilePath">
            <summary>
                Gets or sets the project file path.
            </summary>
        </member>
        <member name="P:BOA.Tasks.MSBuildData.StandardError">
            <summary>
                Gets the standard error.
            </summary>
        </member>
        <member name="T:BOA.Tasks.MSBuild">
            <summary>
                The ms build
            </summary>
        </member>
        <member name="M:BOA.Tasks.MSBuild.Build(BOA.Tasks.MSBuildData)">
            <summary>
                Builds the specified data.
            </summary>
        </member>
        <member name="M:BOA.Tasks.MSBuild.GetBatFileContent(BOA.Tasks.MSBuildData)">
            <summary>
                Gets the content of the bat file.
            </summary>
        </member>
        <member name="M:BOA.Tasks.MSBuild.GetMsBuildExePath">
            <summary>
                Gets the ms build executable path.
            </summary>
        </member>
        <member name="M:BOA.Tasks.MSBuild.ProgramFilesX86">
            <summary>
                Programs the files X86.
            </summary>
        </member>
        <member name="T:System.Extensions">
            <summary>
                The extensions
            </summary>
        </member>
        <member name="P:System.Extensions.DefaultFormatProvider">
            <summary>
                Gets the default format provider.
            </summary>
        </member>
        <member name="M:System.Extensions.AssertNotNull``1(``0,System.String,System.String,System.String,System.Int32)">
            <summary>
                Asserts the not null.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Extensions.Compare(System.Object,System.Object,System.IFormatProvider)">
            <summary>
                Compares the specified right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.IsBiggerThan(System.Object,System.Object,System.IFormatProvider)">
            <summary>
                Determines whether [is bigger than] [the specified right].
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
                <c>true</c> if [is bigger than] [the specified right]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Extensions.IsNotNull(System.Object)">
            <summary>
                Determines whether [is not null].
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if [is not null] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Extensions.IsNull(System.Object)">
            <summary>
                Determines whether this instance is null.
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified value is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Extensions.IsNumeric(System.Object)">
            <summary>
                Determines whether this instance is numeric.
            </summary>
        </member>
        <member name="M:System.Extensions.IsNumeric(System.Type)">
            <summary>
                Determines whether this instance is numeric.
            </summary>
        </member>
        <member name="M:System.Extensions.IsSame(System.Object,System.Object,System.IFormatProvider)">
            <summary>
                Determines whether the specified right is same.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
                <c>true</c> if the specified right is same; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Extensions.IsString(System.Object)">
            <summary>
                Determines whether this instance is string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.ToBoolean(System.Object)">
            <summary>
                To the boolean.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.ToBoolean(System.Object,System.IFormatProvider)">
            <summary>
                To the boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:System.Extensions.ToBooleanNullable(System.Object)">
            <summary>
                To the boolean nullable.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.ToBooleanNullable(System.Object,System.IFormatProvider)">
            <summary>
                To the boolean nullable.
            </summary>
            <param name="value">The value.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.ToDecimal(System.Object,System.IFormatProvider)">
            <summary>
                To the decimal.
            </summary>
            <param name="value">The value.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:System.Extensions.ToDecimal(System.Object)">
            <summary>
                To the decimal.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:System.Extensions.ToDecimalNullable(System.Object,System.IFormatProvider)">
            <summary>
                To the decimal nullable.
            </summary>
            <param name="value">The value.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.ToDecimalNullable(System.Object)">
            <summary>
                To the decimal nullable.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.ToInt32(System.Object)">
            <summary>
                To the int32.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:System.Extensions.ToInt32Nullable(System.Object,System.IFormatProvider)">
            <summary>
                To the int32 nullable.
            </summary>
            <param name="value">The value.</param>
            <param name="formatProvider">The format provider.</param>
            <returns></returns>
        </member>
        <member name="M:System.Extensions.ToInt32Nullable(System.Object)">
            <summary>
                To the int32 nullable.
            </summary>
        </member>
        <member name="M:System.Extensions.ValueMustbeNumeric(System.Object)">
            <summary>
                Values the mustbe numeric.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:System.ComponentModel.BagChangedEventArgs">
            <summary>
                The bag changed event arguments
            </summary>
            <seealso cref="T:System.ComponentModel.PropertyChangedEventArgs" />
        </member>
        <member name="M:System.ComponentModel.BagChangedEventArgs.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.ComponentModel.BagChangedEventArgs" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:System.ComponentModel.BagChangedEventArgs.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:System.ComponentModel.BagChangedEventArgs" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.ComponentModel.BagChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:System.ComponentModel.BagChangedEventArgs" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:System.ComponentModel.BagChangedEventArgs.NewValue">
            <summary>
                Gets the new value.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BagChangedEventArgs.OldValue">
            <summary>
                Gets the old value.
            </summary>
        </member>
        <member name="T:System.ComponentModel.Bag">
            <summary>
                The bag
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="F:System.ComponentModel.Bag._entries">
            <summary>
                The entries
            </summary>
        </member>
        <member name="P:System.ComponentModel.Bag.Item(System.String)">
            <summary>
                Gets or sets the <see cref="T:System.Object" /> with the specified property name.
            </summary>
            <value>
                The <see cref="T:System.Object" />.
            </value>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentModel.Bag.ContainsKey(System.String)">
            <summary>
                Determines whether the specified property name contains key.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
                <c>true</c> if the specified property name contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.Bag.ContainsKey(System.Enum)">
            <summary>
                Determines whether the specified property name contains key.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
                <c>true</c> if the specified property name contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.Bag.GetValue(System.String)">
            <summary>
                Gets the value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentModel.Bag.SetValue(System.String,System.Object)">
            <summary>
                Sets the value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="E:System.ComponentModel.Bag.PropertyChanged">
            <summary>
                Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="M:System.ComponentModel.Bag.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
                Called when [property changed].
            </summary>
            <param name="prop">The property.</param>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="M:System.ComponentModel.Bag.OnPropertyChanged(System.String)">
            <summary>
                Called when [property changed].
            </summary>
            <param name="prop">The property.</param>
        </member>
        <member name="T:System.Collections.Generic.Extensions">
            <summary>
                The extensions
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Extensions.SetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Sets the value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Extensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Tries the get value.
            </summary>
        </member>
        <member name="T:System.Web.WhiteStoneExtensions">
            <summary>
                The white stone extensions
            </summary>
        </member>
        <member name="M:System.Web.WhiteStoneExtensions.InputStreamAsJson(System.Web.HttpRequest)">
            <summary>
                Inputs the stream as json.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Extensions">
            <summary>
                The extensions
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.GetText(System.Windows.Controls.RichTextBox)">
            <summary>
                Gets the text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.SetText(System.Windows.Controls.RichTextBox,System.String)">
            <summary>
                Sets the text.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.Helper">
            <summary>
                The helper
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.Helper.GetHtmlDocument(System.String)">
            <summary>
                Gets the HTML document.
            </summary>
        </member>
        <member name="T:WhiteStone.Common.ContractBase">
            <summary>
                Base class of <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> property required classes.
            </summary>
        </member>
        <member name="E:WhiteStone.Common.ContractBase.PropertyChanged">
            <summary>
                Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="M:WhiteStone.Common.ContractBase.OnPropertyChanged(System.String)">
            <summary>
                Notifies clients that a property value has changed.
            </summary>
            <param name="prop"></param>
        </member>
        <member name="T:WhiteStone.Common.Pair`2">
            <summary>
                Utility pair for holding pair values.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:WhiteStone.Common.Pair`2.#ctor">
            <summary>
                Utility pair for holding pair values.
            </summary>
        </member>
        <member name="M:WhiteStone.Common.Pair`2.#ctor(`0,`1)">
            <summary>
                Utility pair for holding pair values.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:WhiteStone.Common.Pair`2.Key">
            <summary>
                Key
            </summary>
        </member>
        <member name="P:WhiteStone.Common.Pair`2.Value">
            <summary>
                Value
            </summary>
        </member>
        <member name="M:WhiteStone.Common.Pair`2.ToString">
            <summary>
                Represents string value of pair.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WhiteStone.Services.FileLogging.FileLoggerCreator">
            <summary>
                Defines the desktop application file logger.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.FileLogging.FileLoggerCreator.Create">
            <summary>
                Creates this instance.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.FileLogging.FileLogger">
            <summary>
                Append text existing file.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.FileLogging.FileLogger.#ctor(System.String)">
            <summary>
                Append text existing file.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.FileLogging.FileLogger.PrepareMessage(System.String,System.String,System.String,System.Int32)">
            <summary>
                Prepares the message.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.FileLogging.FileLogger.Log(System.String,System.String,System.String,System.Int32)">
            <summary>
                Logs the specified message.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.ILogger">
            <summary>
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ILogger.Log(System.String,System.String,System.String,System.Int32)">
            <summary>
                Append text in a log file.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.Tracer">
            <summary>
                Defines the tracer.
            </summary>
        </member>
        <member name="P:WhiteStone.Services.Tracer.TraceHandler">
            <summary>
                Gets or sets the trace handler.
            </summary>
        </member>
        <member name="P:WhiteStone.Services.Tracer.Messages">
            <summary>
                Gets the messages.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.Tracer.Trace(System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
                Traces the specified message.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.FileService">
            <summary>
                Defines the file helper.
            </summary>
        </member>
        <member name="P:WhiteStone.Services.FileService.Tracer">
            <summary>
                Gets or sets the tracer.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.FileService.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WhiteStone.Services.FileService" /> class.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.FileService.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
                Copies the directory.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.IDataTableStringifier">
            <summary>
                Responsible for generate string representation of any DataTable.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.IDataTableStringifier.StringifyDataTable(System.Data.DataTable)">
            <summary>
                Generates string representation of given <paramref name="table" />.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.ISerializer">
            <summary>
                Serialization
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ISerializer.Deserialize``1(System.String)">
            <summary>
                converts given content to requested type
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ISerializer.Deserialize(System.String,System.Type)">
            <summary>
                Deserializes the specified serialized content.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ISerializer.Serialize(System.Object)">
            <summary>
                Serializes the specified object to a JSON string.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.JsonSerializer">
            <summary>
                Defines the json serializer.
            </summary>
            <seealso cref="T:WhiteStone.Services.ISerializer" />
        </member>
        <member name="M:WhiteStone.Services.JsonSerializer.Deserialize``1(System.String)">
            <summary>
                Converts json content to given type
            </summary>
        </member>
        <member name="M:WhiteStone.Services.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
                Deserializes the specified serialized content.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.JsonSerializer.Serialize(System.Object)">
            <summary>
                Serializes the specified object to a JSON string.
            </summary>
        </member>
        <member name="T:WhiteStone.Services.IServiceManager">
            <summary>
                Manages  service in using in program.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.IServiceManager.GetService``1">
            <summary>
                Gets specific service supports given interface.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.IServiceManager.SetService``1(``0)">
            <summary>
                Sets service instance
            </summary>
        </member>
        <member name="T:WhiteStone.Services.ServiceManager">
            <summary>
                Maintains a list of services that can be shutdown in the reverse order of their initialization.
                Maintains references to the core service implementations.
            </summary>
        </member>
        <member name="P:WhiteStone.Services.ServiceManager.Instance">
            <summary>
                Gets unique instance of <see cref="T:WhiteStone.Services.IServiceManager" />
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ServiceManager.GetService(System.Type)">
            <summary>
                Gets a service. Returns null if service is not found.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ServiceManager.GetService(System.String)">
            <summary>
                Gets a service. Returns null if service is not found.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ServiceManager.GetService``1">
            <summary>
                Gets a service. Returns null if service is not found.
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ServiceManager.SetService``1(``0)">
            <summary>
                Sets service instance
            </summary>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WhiteStone.Services.ServiceManager.SetService(System.String,System.Object)">
            <summary>
                Sets service instance
            </summary>
        </member>
        <member name="M:WhiteStone.Services.ServiceManager.LoadFromJsonString(System.String)">
            <summary>
                Loads from json string.
            </summary>
            <param name="serviceInfoJsonArray">The service information json array.</param>
        </member>
        <member name="T:WhiteStone.Services.ServiceInfo">
            <summary>
                Defines the service information.
            </summary>
        </member>
        <member name="P:WhiteStone.Services.ServiceInfo.InterfaceName">
            <summary>
                Gets or sets the name of the interface.
            </summary>
        </member>
        <member name="P:WhiteStone.Services.ServiceInfo.ImplementationTypeName">
            <summary>
                Gets or sets the name of the implementation type.
            </summary>
        </member>
        <member name="P:WhiteStone.Services.ServiceInfo.AssemblyName">
            <summary>
                Gets or sets the name of the assembly.
            </summary>
        </member>
        <member name="T:WhiteStone.Communication.IExecuter">
            <summary>
                Defines a mechanism for Executing request
            </summary>
        </member>
        <member name="M:WhiteStone.Communication.IExecuter.Execute``2(``0)">
            <summary>
                Gets response of request.
            </summary>
        </member>
        <member name="T:WhiteStone.Communication.RequestBase">
            <summary>
                Requestbase class for sending requests to another systems
            </summary>
        </member>
        <member name="T:WhiteStone.Communication.ResponseBase">
            <summary>
                Communication result.
            </summary>
        </member>
        <member name="T:WhiteStone.Configuration.PropertyFile">
            <summary>
                Manages a Java property file.
            </summary>
        </member>
        <member name="M:WhiteStone.Configuration.PropertyFile.LoadFromFile(System.String)">
            <summary>
                Loads properties from existing property file.
            </summary>
        </member>
        <member name="P:WhiteStone.Configuration.PropertyFile.Item(System.String)">
            <summary>
                Gets config value by given key.
            </summary>
        </member>
        <member name="P:WhiteStone.Configuration.PropertyFile.AllKeys">
            <summary>
                Gets all the keys in settings.
            </summary>
        </member>
        <member name="T:WhiteStone.Configuration.AppSettingReader">
            <summary>
                Defines a methods for accessing config reading operations.
            </summary>
        </member>
        <member name="P:WhiteStone.Configuration.AppSettingReader.Item(System.String)">
            <summary>
                Gets config value by given key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:WhiteStone.Configuration.IConfigReader">
            <summary>
                Defines a methods for accessing config reading operations.
            </summary>
        </member>
        <member name="P:WhiteStone.Configuration.IConfigReader.Item(System.String)">
            <summary>
                Gets config value by given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:WhiteStone.Helpers.IEnumerableExtension">
            <summary>
                Represents helper methods for type <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.IEnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Runs an action for each item in enumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:WhiteStone.Helpers.INotifyPropertyChangedHelper">
            <summary>
                Utility methods for INotifyPropertyChanged interface
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.INotifyPropertyChangedHelper.OnPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)">
            <summary>
                invoke action when propertyName raised
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.INotifyPropertyChangedHelper.OnPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action[])">
            <summary>
                invoke action list when propertyName raised
            </summary>
        </member>
        <member name="T:WhiteStone.Helpers.GlobalizationUtility">
            <summary>
                Utility methods for globalizations
            </summary>
        </member>
        <member name="P:WhiteStone.Helpers.GlobalizationUtility.EnglishCulture">
            <summary>
                Gets culture of "en-US"
            </summary>
        </member>
        <member name="P:WhiteStone.Helpers.GlobalizationUtility.TurkishCulture">
            <summary>
                Gets culture of "tr-TR"
            </summary>
        </member>
        <member name="T:WhiteStone.Helpers.DataReaderUtility">
            <summary>
                Utility methods for <see cref="T:System.Data.IDataReader" />
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.DataReaderUtility.ForEachRow(System.Data.IDataReader,System.Action{System.Data.IDataReader})">
            <summary>
                Fors the each row.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.DataReaderUtility.ToDataTable(System.Data.IDataReader)">
            <summary>
                Converts <paramref name="dataReader" /> value to DataTable instance.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.DataReaderUtility.ToList``1(System.Data.IDataReader)">
            <summary>
                Converts <paramref name="dataReader" /> parameter to list of <code>TContract</code>
            </summary>
        </member>
        <member name="T:WhiteStone.Helpers.DataReaderUtility.DataReaderAdapter">
            <summary>
                The data reader adapter
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.DataReaderUtility.DataReaderAdapter.FillFromReader(System.Data.DataTable,System.Data.IDataReader)">
            <summary>
                Fills from reader.
            </summary>
        </member>
        <member name="T:WhiteStone.Helpers.ListUtility">
            <summary>
                Extension methods for List class.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.ListUtility.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps two values at given indexes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteStone.Helpers.ListUtility.Split``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Splits list elements to smaller element list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="sliceSize"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteStone.Helpers.ListUtility.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
                Indicates whether the specified collection is null or [collection.Count] is zero.
            </summary>
        </member>
        <member name="T:WhiteStone.Helpers.NumberUtility">
            <summary>
                Helper methods for numeric operations.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.NumberUtility.GetIntegerPart(System.Decimal)">
            <summary>
                Returns integer part of decimal value
                <para></para>
                <example>Example</example>
                <para></para>
                GetIntegerPart(12.999) returns 12
                <para></para>
                GetIntegerPart(-12.999) returns -12
                <para></para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteStone.Helpers.NumberUtility.GetFractionalPart(System.Decimal)">
            <summary>
                Gets fractional part as string
                <para></para>
                <example>Example</example>
                <para></para>
                GetFractionalPart(12.998000) returns "998"
                <para></para>
                GetFractionalPart(-12.998) returns "998"
                <para></para>
                GetFractionalPart(12.00998) returns "00998"
                <para></para>
                GetFractionalPart(12) returns null
                <para></para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WhiteStone.Helpers.StringBuilderExtensions">
            <summary>
                Helper methods for StringBuilder class.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.StringBuilderExtensions.EndsWith(System.Text.StringBuilder,System.String)">
            <summary>
                Returns true if stringBuilder endsWith given parameter <paramref name="text" />
            </summary>
            <param name="sb"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:WhiteStone.Helpers.CompilerUtility">
            <summary>
                Helper methods for compile operations
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.CompilerUtility.CompileCSharpCodesToAssembly(System.String,System.String[],System.String[])">
            <summary>
                Compiles c# codes to .Net byte code.
            </summary>
            <param name="outputAssembly"></param>
            <param name="referencedAssemblies"></param>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="T:WhiteStone.Helpers.StreamReadTrace">
            <summary>
                The stream read trace
            </summary>
        </member>
        <member name="P:WhiteStone.Helpers.StreamReadTrace.CurrentByteCount">
            <summary>
                Gets the current byte count.
            </summary>
        </member>
        <member name="P:WhiteStone.Helpers.StreamReadTrace.ShuttleCount">
            <summary>
                Gets the shuttle count.
            </summary>
        </member>
        <member name="P:WhiteStone.Helpers.StreamReadTrace.TotalByteCount">
            <summary>
                Gets the total byte count.
            </summary>
        </member>
        <member name="T:WhiteStone.Helpers.StreamUtility">
            <summary>
                Helper extension methods for Stream class.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.StreamUtility.ReadAll(System.IO.Stream)">
            <summary>
                Reads all stream and returns as Byte Array
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.StreamUtility.ReadAllWriteToOutput(System.IO.Stream,System.IO.Stream)">
            <summary>
                Reads all write to output.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.StreamUtility.ReadToEndAsString(System.IO.Stream)">
            <summary>
                Reads all part of stream and returns as String
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.StreamUtility.TransferStream(System.IO.Stream,System.IO.Stream)">
            <summary>
                Transfers the stream.
            </summary>
        </member>
        <member name="M:WhiteStone.Helpers.StreamUtility.TransferStream(System.IO.Stream,System.IO.Stream,System.Action{WhiteStone.Helpers.StreamReadTrace})">
            <summary>
                Transfers the stream.
            </summary>
        </member>
        <member name="T:WhiteStone.IO.FileService">
            <summary>
                Utility file methods.
            </summary>
        </member>
        <member name="P:WhiteStone.IO.FileService.DirectorySeparatorChar">
            <summary>
                Gets directory seperator
            </summary>
        </member>
        <member name="M:WhiteStone.IO.FileService.Append(System.String,System.String)">
            <summary>
                Appends specific text to file.
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
        </member>
        <member name="M:WhiteStone.IO.FileService.CreateDirectory(System.String)">
            <summary>
                Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:WhiteStone.IO.FileService.EnsureDirectory(System.String)">
            <summary>
                if path is not exists then creates a file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:WhiteStone.IO.FileService.Exists(System.String)">
            <summary>
                Determines whether the specified file exists.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteStone.IO.FileService.Read(System.String)">
            <summary>
                Reads all text of given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteStone.IO.FileService.ReadAsByte(System.String)">
            <summary>
                Gets byte[] value of file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteStone.IO.FileService.SearchFileNames(System.String,System.Predicate{System.String})">
            <summary>
                Gets filenames by filter.
            </summary>
            <param name="dir"></param>
            <param name="predicateForFileName"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteStone.IO.FileService.TryDelete(System.String)">
            <summary>
                Tries to delete specific file.
            </summary>
        </member>
        <member name="M:WhiteStone.IO.FileService.Write(System.String,System.String)">
            <summary>
                Writes contents to given path
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
        </member>
        <member name="M:WhiteStone.IO.FileService.Write(System.String,System.Byte[])">
            <summary>
                Writes all bytes to given <paramref name="path" />
            </summary>
            <param name="path"></param>
            <param name="byteArray"></param>
        </member>
    </members>
</doc>
