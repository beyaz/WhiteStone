<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter name="data" type="BOA.EntityGeneration.BOACardCustomSqlIntoProjectInjection.Models.Interfaces.ICustomSqlInfo" #>
<#@ parameter name="key" type="System.String" #>
<#@ parameter name="ProfileId" type="System.String" #>
/// <summary>
///     Data access part of '<#=data.Name#>' sql.
/// </summary>
public sealed class <#=data.BusinessClassName#> : ObjectHelper
{
	const string CallerMemberPath = "<#=key#>";
	const string ProfileId        = "<#=ProfileId#>";
	const string ObjectId         = "<#=data.Name#>";

	/// <summary>
	///     Data access part of '<#=data.Name#>' sql.
	/// </summary>
	public <#=data.BusinessClassName#>(ExecutionDataContext context) : base(context) {}

	/// <summary>
	///     Data access part of '<#=data.Name#>' sql.
	/// </summary>
<#if (data.SqlResultIsCollection)#>
<#{#>
	public GenericResponse<List<<#=data.ResultContractName#>>> Execute(<#=data.ParameterContractName#> request)
	{
		var sqlInfo = CreateSqlInfo(request);

		return this.ExecuteCustomSql<<#=data.ResultContractName#>>(CallerMemberPath, sqlInfo, ReadContract, ProfileId, ObjectId);
	}	
<#}#>
<#else#>
<#{#>
	public GenericResponse<<#=data.ResultContractName#>> Execute(<#=data.ParameterContractName#> request)
	{
		var sqlInfo = CreateSqlInfo(request);

		return this.ExecuteCustomSqlForOneRecord<<#=data.ResultContractName#>>(CallerMemberPath, sqlInfo, ReadContract, ProfileId, ObjectId);
	}
<#}#>

	/// <summary>
	///     Maps reader columns to contract for '<#=data.Name#>' sql.
	/// </summary>
	static void ReadContract(IDataRecord reader, <#=data.ResultContractName#> contract)
	{
<#foreach (var item in data.ResultColumns){#>
		contract.<#=item.NameInDotnet#> = SQLDBHelper.<#=item.SqlReaderMethod#>(reader["<#=item.Name#>"]);
<#}#>
	}

	static SqlInfo CreateSqlInfo(<#=data.ParameterContractName#> request)
	{
		var sqlInfo = new SqlInfo();
		<#if (data.Parameters.Any()){#>
		
<#foreach (var item in data.Parameters){#>
		sqlInfo.AddInParameter("@<#=item.Name#>", SqlDbType.<#=item.SqlDbTypeName#>, request.<#=item.ValueAccessPathForAddInParameter#>);
<#}#>
		<#}#>
	
		return sqlInfo;
	}
}